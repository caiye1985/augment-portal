openapi: 3.0.3
info:
  title: 基础架构模块 API
  version: 1.0.0
  description: REQ-001 基础架构模块 API 规范 - 提供多租户架构、统一认证、权限管理、数据存储等核心基础服务
tags:
- name: Authentication
  description: 用户认证相关接口
- name: Session Management
  description: 会话管理相关接口
- name: User Management
  description: 用户管理相关接口
- name: Role Management
  description: 角色管理相关接口
- name: Permission Management
  description: 权限管理相关接口
- name: Tenant Management
  description: 租户管理相关接口
- name: Configuration
  description: 配置管理相关接口
- name: Audit
  description: 审计日志相关接口
- name: Internal Services
  description: 内部服务接口
- name: System
  description: 系统监控相关接口
paths:
  /api/v1/auth/login:
    post:
      tags:
      - Authentication
      summary: 用户登录
      description: 支持多种认证方式的用户登录接口，包括用户名密码、短信验证码、企业SSO等
      operationId: auth_login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: '#/components/schemas/ApiResponse'
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/auth/logout:
    post:
      tags:
      - Authentication
      summary: 用户登出
      description: 用户主动登出，清理会话信息
      operationId: auth_logout
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /api/v1/auth/refresh:
    post:
      tags:
      - Authentication
      summary: 刷新访问令牌
      description: 使用刷新令牌获取新的访问令牌
      operationId: auth_refresh_token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: 令牌刷新成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/TokenResponse'
        '401':
          $ref: ../../global-api-index.yaml#/components/responses/Unauthorized
  /api/v1/auth/check-permission:
    post:
      tags:
      - Authentication
      summary: 权限验证
      description: 验证用户是否具有指定资源的访问权限
      operationId: auth_check_permission
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionCheckRequest'
      responses:
        '200':
          description: 权限验证完成
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/PermissionCheckResponse'
  /api/v1/auth/sessions:
    get:
      tags:
      - Session Management
      summary: 查询用户会话列表
      description: 获取当前用户的所有活跃会话信息
      operationId: session_list
      security:
      - BearerAuth: []
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/SessionListResponse'
  /api/v1/auth/sessions/{session_id}:
    delete:
      tags:
      - Session Management
      summary: 注销指定会话
      description: 注销指定的用户会话
      operationId: session_delete
      security:
      - BearerAuth: []
      parameters:
      - name: session_id
        in: path
        required: true
        schema:
          type: string
        example: sess_1234567890abcdef
      responses:
        '200':
          description: 会话注销成功
          content:
            application/json:
              schema:
                $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
        '404':
          $ref: ../../global-api-index.yaml#/components/responses/NotFound
  /api/v1/users:
    get:
      tags:
      - User Management
      summary: 查询用户列表
      description: 分页查询租户内的用户列表，支持多条件筛选
      operationId: user_list
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          minimum: 1
          default: 1
        example: 1
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        example: 20
      - name: keyword
        in: query
        schema:
          type: string
        description: 搜索关键词（用户名、邮箱、真实姓名）
        example: admin
      - name: status
        in: query
        schema:
          type: array
          items: &id001
            type: string
        description: 用户状态筛选
        example: 1
      - name: role_id
        in: query
        schema:
          type: integer
        description: 角色ID筛选
        example: 10
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/PagedResponse
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/UserInfo'
    post:
      tags:
      - User Management
      summary: 创建用户
      description: 在当前租户下创建新用户
      operationId: user_create
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: 用户创建成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UserInfo'
        '400':
          $ref: ../../global-api-index.yaml#/components/responses/BadRequest
        '409':
          $ref: ../../global-api-index.yaml#/components/responses/Conflict
  /api/v1/users/{id}:
    get:
      tags:
      - User Management
      summary: 查询用户详情
      description: 根据用户ID查询用户详细信息
      operationId: user_get
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 1001
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UserDetailInfo'
        '404':
          $ref: ../../global-api-index.yaml#/components/responses/NotFound
    put:
      tags:
      - User Management
      summary: 更新用户信息
      description: 更新指定用户的基本信息
      operationId: user_update
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 1001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/UserInfo'
        '404':
          $ref: ../../global-api-index.yaml#/components/responses/NotFound
    delete:
      tags:
      - User Management
      summary: 删除用户
      description: 软删除指定用户（设置deleted_at字段）
      operationId: user_delete
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 1001
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
        '404':
          $ref: ../../global-api-index.yaml#/components/responses/NotFound
  /api/v1/users/batch-import:
    post:
      tags:
      - User Management
      summary: 批量导入用户
      description: 通过Excel文件批量导入用户数据
      operationId: user_batch_import
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Excel文件
                options:
                  type: string
                  description: 导入选项（JSON格式）
                  example: '{"default_role_ids": [3], "send_welcome_email": true}'
      responses:
        '200':
          description: 导入完成
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/BatchImportResult'
  /api/v1/roles:
    get:
      tags:
      - Role Management
      summary: 查询角色列表
      description: 分页查询租户内的角色列表
      operationId: role_list
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          minimum: 1
          default: 1
        example: 1
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        example: 20
      - name: keyword
        in: query
        schema:
          type: string
        description: 搜索关键词（角色编码、角色名称）
        example: admin
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/PagedResponse
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/RoleInfo'
    post:
      tags:
      - Role Management
      summary: 创建角色
      description: 在当前租户下创建新角色
      operationId: role_create
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoleRequest'
      responses:
        '200':
          description: 角色创建成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/RoleInfo'
  /api/v1/roles/{id}/permissions:
    get:
      tags:
      - Role Management
      summary: 查询角色权限
      description: 查询指定角色的权限列表，包括继承的权限
      operationId: role_get_permissions
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 10
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/RolePermissionsResponse'
    post:
      tags:
      - Role Management
      summary: 分配权限给角色
      description: 为指定角色分配或移除权限
      operationId: role_assign_permissions
      security:
      - BearerAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignPermissionsRequest'
      responses:
        '200':
          description: 权限分配成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/PermissionAssignResult'
  /api/v1/admin/tenants:
    get:
      tags:
      - Tenant Management
      summary: 查询租户列表
      description: 系统管理员查询所有租户列表（跨租户权限）
      operationId: tenant_list
      security:
      - BearerAuth: []
      parameters:
      - name: page
        in: query
        schema:
          type: integer
          minimum: 1
          default: 1
        example: 1
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        example: 20
      - name: status
        in: query
        schema:
          type: array
          items: *id001
        description: 租户状态筛选
        example: 1
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/PagedResponse
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/TenantInfo'
    post:
      tags:
      - Tenant Management
      summary: 创建租户
      description: 系统管理员创建新租户
      operationId: tenant_create
      security:
      - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
      responses:
        '200':
          description: 租户创建成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/TenantInfo'
  /api/v1/admin/configs:
    get:
      tags:
      - Configuration
      summary: 查询系统配置
      description: 查询系统级配置列表，支持分类筛选
      operationId: config_list
      security:
      - BearerAuth: []
      parameters:
      - name: category
        in: query
        schema:
          type: string
        description: 配置分类
        example: security
      - name: page
        in: query
        schema:
          type: integer
          minimum: 1
          default: 1
        example: 1
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        example: 20
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/PagedResponse
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/ConfigInfo'
  /api/v1/admin/configs/{key}:
    put:
      tags:
      - Configuration
      summary: 更新系统配置
      description: 更新指定的系统配置项
      operationId: config_update
      security:
      - BearerAuth: []
      parameters:
      - name: key
        in: path
        required: true
        schema:
          type: string
        example: security.password_policy.min_length
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConfigRequest'
      responses:
        '200':
          description: 配置更新成功
          content:
            application/json:
              schema:
                $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
  /api/v1/audit/logs:
    get:
      tags:
      - Audit
      summary: 查询审计日志
      description: 分页查询审计日志，支持多条件筛选
      operationId: audit_log_list
      security:
      - BearerAuth: []
      parameters:
      - name: start_time
        in: query
        schema:
          type: string
          format: date-time
        description: 开始时间
        example: '2024-08-14T00:00:00Z'
      - name: end_time
        in: query
        schema:
          type: string
          format: date-time
        description: 结束时间
        example: '2024-08-14T23:59:59Z'
      - name: action
        in: query
        schema:
          type: string
        description: 操作动作筛选
        example: user:create
      - name: user_id
        in: query
        schema:
          type: integer
          format: int64
        description: 用户ID筛选
        example: 1001
      - name: page
        in: query
        schema:
          type: integer
          minimum: 1
          default: 1
        example: 1
      - name: size
        in: query
        schema:
          type: integer
          minimum: 1
          maximum: 100
          default: 20
        example: 20
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/PagedResponse
                - type: object
                  properties:
                    data:
                      type: object
                      properties:
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/AuditLogInfo'
  /api/v1/internal/auth/verify:
    post:
      tags:
      - Internal Services
      summary: 权限验证（内部调用）
      description: 供其他模块调用的权限验证接口
      operationId: internal_auth_verify
      security:
      - InternalAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InternalAuthVerifyRequest'
      responses:
        '200':
          description: 验证成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/InternalAuthVerifyResponse'
  /api/v1/internal/tenants/{id}:
    get:
      tags:
      - Internal Services
      summary: 查询租户信息（内部调用）
      description: 供其他模块调用的租户信息查询接口
      operationId: internal_tenant_get
      security:
      - InternalAuth: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
        example: 1
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                - $ref: ../../global-api-index.yaml#/components/schemas/ApiResponse
                - type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/TenantInfo'
  /api/v1/health:
    get:
      tags:
      - System
      summary: 健康检查
      description: 系统健康状态检查接口
      operationId: system_health_check
      responses:
        '200':
          description: 系统正常
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthCheckResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    InternalAuth:
      type: apiKey
      in: header
      name: X-Internal-Service
  responses:
    BadRequest:
      description: 请求参数错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: 未认证或认证失败
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: 权限不足
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: 资源不存在
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: 资源冲突
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerError:
      description: 服务器内部错误
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          description: 响应状态码
          example: 200
        message:
          type: string
          description: 响应消息
          example: 操作成功
        data:
          type: object
          description: 响应数据
        timestamp:
          type: string
          format: date-time
          description: 响应时间
          example: '2024-08-14T15:30:00Z'
    PagedResponse:
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
        properties:
          data:
            type: object
            properties:
              total:
                type: integer
                description: 总记录数
                example: 100
              page:
                type: integer
                description: 当前页码
                example: 1
              size:
                type: integer
                description: 每页大小
                example: 20
              items:
                type: array
                description: 数据列表
                items:
                  type: object
    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: 错误状态码
          example: 400
        message:
          type: string
          description: 错误消息
          example: 请求参数错误
        error:
          type: string
          description: 错误详情
          example: 用户名不能为空
        timestamp:
          type: string
          format: date-time
          description: 错误时间
          example: '2024-08-14T15:30:00Z'
    LoginRequest:
      type: object
      required:
      - tenant_code
      - username
      - password
      - auth_type
      properties:
        tenant_code:
          type: string
          description: 租户编码
          example: DEMO-20250814-001
        username:
          type: string
          description: 用户名
          example: admin
        password:
          type: string
          description: 密码
          example: password123
        auth_type:
          type: string
          enum:
          - password
          - sms
          - email
          - sso
          description: 认证方式
          example: password
        remember_me:
          type: boolean
          description: 是否记住登录状态
          example: true
        device_info:
          type: object
          description: 设备信息
          properties:
            device_type:
              type: string
              example: web
            browser:
              type: string
              example: Chrome 120.0
            os:
              type: string
              example: Windows 11
    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
          description: 访问令牌
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refresh_token:
          type: string
          description: 刷新令牌
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires_in:
          type: integer
          description: 令牌过期时间（秒）
          example: 7200
        session_id:
          type: string
          description: 会话ID
          example: sess_1234567890abcdef
        user_info:
          $ref: '#/components/schemas/UserInfo'
    RefreshTokenRequest:
      type: object
      required:
      - refresh_token
      properties:
        refresh_token:
          type: string
          description: 刷新令牌
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    TokenResponse:
      type: object
      properties:
        access_token:
          type: string
          description: 新的访问令牌
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires_in:
          type: integer
          description: 令牌过期时间（秒）
          example: 7200
    PermissionCheckRequest:
      type: object
      required:
      - resource_type
      - resource_path
      - action
      properties:
        resource_type:
          type: string
          enum:
          - api
          - menu
          - button
          - data
          description: 资源类型
          example: api
        resource_path:
          type: string
          description: 资源路径
          example: /api/v1/users
        action:
          type: string
          enum:
          - read
          - write
          - delete
          - execute
          description: 操作动作
          example: read
    PermissionCheckResponse:
      type: object
      properties:
        granted:
          type: boolean
          description: 是否授权
          example: true
        permission_code:
          type: string
          description: 权限编码
          example: user:read
        granted_by_roles:
          type: array
          description: 授权角色列表
          items:
            type: string
          example:
          - admin
          - user_manager
    SessionListResponse:
      type: object
      properties:
        current_session:
          type: string
          description: 当前会话ID
          example: sess_1234567890abcdef
        sessions:
          type: array
          description: 会话列表
          items:
            $ref: '#/components/schemas/SessionInfo'
    SessionInfo:
      type: object
      properties:
        session_id:
          type: string
          description: 会话ID
          example: sess_1234567890abcdef
        device_type:
          type: string
          enum:
          - web
          - mobile
          - api
          description: 设备类型
          example: web
        ip_address:
          type: string
          description: IP地址
          example: 192.168.1.100
        location:
          type: string
          description: 登录地点
          example: 北京市
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: '2024-08-14T10:00:00Z'
        last_accessed_at:
          type: string
          format: date-time
          description: 最后访问时间
          example: '2024-08-14T14:30:00Z'
        status:
          type: string
          enum:
          - active
          - expired
          - logout
          - abnormal
          description: 会话状态
          example: active
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 用户ID
          example: 1001
        tenant_id:
          type: integer
          format: int64
          description: 租户ID
          example: 1
        username:
          type: string
          description: 用户名
          example: admin
        email:
          type: string
          format: email
          description: 邮箱
          example: admin@demo.com
        phone:
          type: string
          description: 手机号
          example: '13800138000'
        real_name:
          type: string
          description: 真实姓名
          example: 系统管理员
        avatar_url:
          type: string
          format: uri
          description: 头像URL
          example: https://cdn.example.com/avatars/admin.png
        status:
          type: integer
          enum:
          - 1
          - 2
          - 3
          description: 状态：1-正常，2-停用，3-锁定
          example: 1
        last_login_time:
          type: string
          format: date-time
          description: 最后登录时间
          example: '2024-08-14T14:30:00Z'
        last_login_ip:
          type: string
          description: 最后登录IP
          example: 192.168.1.100
        login_count:
          type: integer
          description: 登录次数
          example: 156
        mfa_enabled:
          type: boolean
          description: 是否启用多因子认证
          example: true
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: '2024-08-14T10:00:00Z'
    UserDetailInfo:
      allOf:
      - $ref: '#/components/schemas/UserInfo'
      - type: object
        properties:
          roles:
            type: array
            description: 用户角色列表
            items:
              $ref: '#/components/schemas/RoleInfo'
          permissions:
            type: array
            description: 用户权限列表
            items:
              type: string
            example:
            - user:read
            - user:write
            - system:config
    CreateUserRequest:
      type: object
      required:
      - username
      - email
      - real_name
      - password
      properties:
        username:
          type: string
          description: 用户名
          example: john_doe
        email:
          type: string
          format: email
          description: 邮箱
          example: john@demo.com
        phone:
          type: string
          description: 手机号
          example: '13800138000'
        real_name:
          type: string
          description: 真实姓名
          example: 约翰·多伊
        password:
          type: string
          description: 初始密码
          example: TempPassword123!
        role_ids:
          type: array
          description: 角色ID列表
          items:
            type: integer
            format: int64
          example:
          - 2
          - 3
        status:
          type: integer
          enum:
          - 1
          - 2
          description: 初始状态
          example: 1
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: 邮箱
          example: john.updated@demo.com
        phone:
          type: string
          description: 手机号
          example: '13800138001'
        real_name:
          type: string
          description: 真实姓名
          example: 约翰·多伊（更新）
        avatar_url:
          type: string
          format: uri
          description: 头像URL
          example: https://cdn.example.com/avatars/john_updated.png
        status:
          type: integer
          enum:
          - 1
          - 2
          - 3
          description: 用户状态
          example: 1
    BatchImportResult:
      type: object
      properties:
        total:
          type: integer
          description: 总记录数
          example: 100
        success:
          type: integer
          description: 成功导入数
          example: 95
        failed:
          type: integer
          description: 失败记录数
          example: 5
        failed_records:
          type: array
          description: 失败记录详情
          items:
            type: object
            properties:
              row:
                type: integer
                description: 行号
                example: 10
              username:
                type: string
                description: 用户名
                example: duplicate_user
              error:
                type: string
                description: 错误信息
                example: 用户名已存在
    RoleInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 角色ID
          example: 10
        tenant_id:
          type: integer
          format: int64
          description: 租户ID
          example: 1
        role_code:
          type: string
          description: 角色编码
          example: admin
        role_name:
          type: string
          description: 角色名称
          example: 系统管理员
        description:
          type: string
          description: 角色描述
          example: 拥有系统所有权限的管理员角色
        is_system:
          type: boolean
          description: 是否系统角色
          example: true
        parent_role_id:
          type: integer
          format: int64
          nullable: true
          description: 父角色ID
          example: null
        status:
          type: integer
          enum:
          - 1
          - 2
          description: 状态：1-正常，2-停用
          example: 1
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: '2024-08-14T10:00:00Z'
    CreateRoleRequest:
      type: object
      required:
      - role_code
      - role_name
      properties:
        role_code:
          type: string
          description: 角色编码
          example: project_manager
        role_name:
          type: string
          description: 角色名称
          example: 项目经理
        description:
          type: string
          description: 角色描述
          example: 负责项目管理和团队协调
        parent_role_id:
          type: integer
          format: int64
          nullable: true
          description: 父角色ID
          example: null
        permission_ids:
          type: array
          description: 权限ID列表
          items:
            type: integer
            format: int64
          example:
          - 1
          - 2
          - 5
          - 8
    RolePermissionsResponse:
      type: object
      properties:
        role_info:
          $ref: '#/components/schemas/RoleInfo'
        permissions:
          type: array
          description: 直接分配的权限
          items:
            $ref: '#/components/schemas/PermissionInfo'
        inherited_permissions:
          type: array
          description: 继承的权限
          items:
            allOf:
            - $ref: '#/components/schemas/PermissionInfo'
            - type: object
              properties:
                inherited_from:
                  type: string
                  description: 继承来源
                  example: 基础用户角色
    AssignPermissionsRequest:
      type: object
      required:
      - permission_ids
      - action
      properties:
        permission_ids:
          type: array
          description: 权限ID列表
          items:
            type: integer
            format: int64
          example:
          - 10
          - 11
          - 12
        action:
          type: string
          enum:
          - grant
          - revoke
          description: 操作类型：grant-授权，revoke-撤销
          example: grant
    PermissionAssignResult:
      type: object
      properties:
        granted_permissions:
          type: integer
          description: 已授权权限数
          example: 3
        total_permissions:
          type: integer
          description: 总权限数
          example: 15
    PermissionInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 权限ID
          example: 1
        permission_code:
          type: string
          description: 权限编码
          example: user:read
        permission_name:
          type: string
          description: 权限名称
          example: 查看用户
        resource_type:
          type: string
          enum:
          - api
          - menu
          - button
          - data
          description: 资源类型
          example: api
        resource_path:
          type: string
          description: 资源路径
          example: /api/v1/users
        action:
          type: string
          enum:
          - read
          - write
          - delete
          - execute
          description: 操作动作
          example: read
        description:
          type: string
          description: 权限描述
          example: 允许查看用户列表和详情
        is_system:
          type: boolean
          description: 是否系统权限
          example: true
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: '2024-08-14T10:00:00Z'
    TenantInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 租户ID
          example: 1
        tenant_code:
          type: string
          description: 租户编码
          example: DEMO-20250814-001
        tenant_name:
          type: string
          description: 租户名称
          example: 演示科技有限公司
        domain:
          type: string
          description: 租户域名
          example: demo.example.com
        status:
          type: integer
          enum:
          - 1
          - 2
          - 3
          description: 状态：1-正常，2-停用，3-过期
          example: 1
        max_users:
          type: integer
          description: 最大用户数
          example: 500
        max_storage_gb:
          type: integer
          description: 最大存储空间(GB)
          example: 100
        expire_time:
          type: string
          format: date-time
          description: 过期时间
          example: '2025-12-31T23:59:59Z'
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: '2024-08-14T10:00:00Z'
    CreateTenantRequest:
      type: object
      required:
      - tenant_code
      - tenant_name
      - max_users
      properties:
        tenant_code:
          type: string
          description: 租户编码
          example: NEWCO-20250814-001
        tenant_name:
          type: string
          description: 租户名称
          example: 新公司有限公司
        domain:
          type: string
          description: 租户域名
          example: newco.example.com
        max_users:
          type: integer
          description: 最大用户数
          example: 200
        max_storage_gb:
          type: integer
          description: 最大存储空间(GB)
          example: 50
        expire_time:
          type: string
          format: date-time
          description: 过期时间
          example: '2025-12-31T23:59:59Z'
    ConfigInfo:
      type: object
      properties:
        config_key:
          type: string
          description: 配置键
          example: security.password_policy.min_length
        config_value:
          type: string
          description: 配置值
          example: '8'
        config_type:
          type: string
          enum:
          - string
          - number
          - boolean
          - json
          description: 配置类型
          example: number
        category:
          type: string
          description: 配置分类
          example: security
        description:
          type: string
          description: 配置描述
          example: 密码最小长度
        is_public:
          type: boolean
          description: 是否公开配置
          example: false
    UpdateConfigRequest:
      type: object
      required:
      - config_value
      properties:
        config_value:
          type: string
          description: 配置值
          example: '12'
        description:
          type: string
          description: 更新说明
          example: 更新密码最小长度要求
    AuditLogInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: 日志ID
          example: 12345
        tenant_id:
          type: integer
          format: int64
          description: 租户ID
          example: 1
        user_id:
          type: integer
          format: int64
          description: 用户ID
          example: 1001
        username:
          type: string
          description: 用户名
          example: admin
        action:
          type: string
          description: 操作动作
          example: user:create
        resource_type:
          type: string
          description: 资源类型
          example: user
        resource_id:
          type: string
          description: 资源ID
          example: '1002'
        resource_name:
          type: string
          description: 资源名称
          example: john_doe
        result:
          type: integer
          enum:
          - 0
          - 1
          description: 操作结果：1-成功，0-失败
          example: 1
        ip_address:
          type: string
          description: IP地址
          example: 192.168.1.100
        duration_ms:
          type: integer
          description: 操作耗时(毫秒)
          example: 150
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: '2024-08-14T15:00:00Z'
    InternalAuthVerifyRequest:
      type: object
      required:
      - user_id
      - tenant_id
      - resource_type
      - resource_path
      - action
      properties:
        user_id:
          type: integer
          format: int64
          description: 用户ID
          example: 1001
        tenant_id:
          type: integer
          format: int64
          description: 租户ID
          example: 1
        resource_type:
          type: string
          enum:
          - api
          - menu
          - button
          - data
          description: 资源类型
          example: api
        resource_path:
          type: string
          description: 资源路径
          example: /api/v1/tickets
        action:
          type: string
          enum:
          - read
          - write
          - delete
          - execute
          description: 操作动作
          example: create
    InternalAuthVerifyResponse:
      type: object
      properties:
        granted:
          type: boolean
          description: 是否授权
          example: true
        user_info:
          type: object
          description: 用户信息
          properties:
            id:
              type: integer
              format: int64
              example: 1001
            username:
              type: string
              example: admin
            tenant_id:
              type: integer
              format: int64
              example: 1
    HealthCheckResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - healthy
          - unhealthy
          - degraded
          description: 系统状态
          example: healthy
        timestamp:
          type: string
          format: date-time
          description: 检查时间
          example: '2024-08-14T15:30:00Z'
        version:
          type: string
          description: 系统版本
          example: 1.0.0
        components:
          type: object
          description: 组件状态
          properties:
            database:
              type: object
              properties:
                status:
                  type: string
                  example: healthy
                response_time_ms:
                  type: integer
                  example: 15
            redis:
              type: object
              properties:
                status:
                  type: string
                  example: healthy
                response_time_ms:
                  type: integer
                  example: 5
            elasticsearch:
              type: object
              properties:
                status:
                  type: string
                  example: healthy
                response_time_ms:
                  type: integer
                  example: 25
