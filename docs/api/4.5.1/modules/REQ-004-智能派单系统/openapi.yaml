openapi: 3.0.3
info:
  title: 智能派单系统 API
  version: 1.0.0
  description: 智能派单系统模块 - 基于AI算法和规则引擎实现工单的自动化分配

tags:
  - name: dispatch
    description: 智能派单核心功能
  - name: dispatch-rules
    description: 派单规则管理
  - name: dispatch-config
    description: 派单配置管理
  - name: dispatch-ml
    description: 机器学习模型管理
  - name: dispatch-monitor
    description: 派单监控分析

paths:
  /api/v1/dispatch/auto:
    post:
      tags:
        - dispatch
      summary: 智能自动派单
      description: 基于AI算法和规则引擎进行智能自动派单
      operationId: dispatch_auto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoDispatchRequest'
      responses:
        '200':
          description: 派单成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '422':
          description: 无可用工程师
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/NoEngineerAvailableResponse'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/manual:
    post:
      tags:
        - dispatch
      summary: 手动指定派单
      description: 管理员手动指定工程师进行派单
      operationId: dispatch_manual
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualDispatchRequest'
      responses:
        '200':
          description: 派单成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '409':
          $ref: '../../global-api-index.yaml#/components/responses/Conflict'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/batch:
    post:
      tags:
        - dispatch
      summary: 批量派单处理
      description: 批量处理多个工单的派单请求
      operationId: dispatch_batch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchDispatchRequest'
      responses:
        '200':
          description: 批量派单完成
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BatchDispatchResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/{id}/reassign:
    put:
      tags:
        - dispatch
      summary: 重新派单
      description: 对已派单的工单进行重新分配
      operationId: dispatch_reassign
      parameters:
        - name: id
          in: path
          required: true
          description: 派单记录ID
          schema:
            type: integer
            example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReassignRequest'
      responses:
        '200':
          description: 重新派单成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '409':
          $ref: '../../global-api-index.yaml#/components/responses/Conflict'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/{id}/cancel:
    delete:
      tags:
        - dispatch
      summary: 撤销派单
      description: 撤销已派单但未接单的工单
      operationId: dispatch_cancel
      parameters:
        - name: id
          in: path
          required: true
          description: 派单记录ID
          schema:
            type: integer
            example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CancelDispatchRequest'
      responses:
        '200':
          description: 撤销成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CancelDispatchResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '409':
          $ref: '../../global-api-index.yaml#/components/responses/Conflict'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/candidates:
    post:
      tags:
        - dispatch
      summary: 获取候选工程师
      description: 根据工单要求获取候选工程师列表和评分
      operationId: dispatch_candidates
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidatesRequest'
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CandidatesResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/rules:
    get:
      tags:
        - dispatch-rules
      summary: 获取派单规则列表
      description: 分页获取派单规则列表
      operationId: dispatch_rules_list
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: size
          in: query
          description: 每页大小
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: rule_type
          in: query
          description: 规则类型
          schema:
            type: string
            enum: [FILTER, WEIGHT, PRIORITY, CONSTRAINT]
            example: "FILTER"
        - name: is_enabled
          in: query
          description: 是否启用
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/PagedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/DispatchRule'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

    post:
      tags:
        - dispatch-rules
      summary: 创建派单规则
      description: 创建新的派单规则
      operationId: dispatch_rules_create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRuleCreateRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchRule'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/rules/{id}:
    get:
      tags:
        - dispatch-rules
      summary: 获取派单规则详情
      description: 根据ID获取派单规则详细信息
      operationId: dispatch_rules_detail
      parameters:
        - name: id
          in: path
          required: true
          description: 规则ID
          schema:
            type: integer
            example: 12345
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchRule'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

    put:
      tags:
        - dispatch-rules
      summary: 更新派单规则
      description: 更新指定的派单规则
      operationId: dispatch_rules_update
      parameters:
        - name: id
          in: path
          required: true
          description: 规则ID
          schema:
            type: integer
            example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRuleUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchRule'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

    delete:
      tags:
        - dispatch-rules
      summary: 删除派单规则
      description: 删除指定的派单规则
      operationId: dispatch_rules_delete
      parameters:
        - name: id
          in: path
          required: true
          description: 规则ID
          schema:
            type: integer
            example: 12345
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/strategies:
    get:
      tags:
        - dispatch-config
      summary: 获取派单策略配置
      description: 获取当前的派单策略配置
      operationId: dispatch_strategies_get
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchStrategy'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

    put:
      tags:
        - dispatch-config
      summary: 更新派单策略配置
      description: 更新派单策略配置
      operationId: dispatch_strategies_update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchStrategyUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchStrategy'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/weights:
    get:
      tags:
        - dispatch-config
      summary: 获取算法权重配置
      description: 获取多维度评分算法的权重配置
      operationId: dispatch_weights_get
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AlgorithmWeights'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

    put:
      tags:
        - dispatch-config
      summary: 更新算法权重配置
      description: 更新多维度评分算法的权重配置
      operationId: dispatch_weights_update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlgorithmWeightsUpdateRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AlgorithmWeights'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/ml/models:
    get:
      tags:
        - dispatch-ml
      summary: 获取模型列表
      description: 获取机器学习模型列表
      operationId: ml_models_list
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
            example: 1
        - name: size
          in: query
          description: 每页大小
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
            example: 20
        - name: model_type
          in: query
          description: 模型类型
          schema:
            type: string
            enum: [XGBOOST, DNN, ENSEMBLE]
            example: "XGBOOST"
        - name: is_active
          in: query
          description: 是否激活
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/PagedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/MLModel'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

    post:
      tags:
        - dispatch-ml
      summary: 创建模型
      description: 创建新的机器学习模型
      operationId: ml_models_create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MLModelCreateRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MLModel'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/ml/models/{id}/deploy:
    post:
      tags:
        - dispatch-ml
      summary: 部署模型
      description: 部署指定的机器学习模型
      operationId: ml_models_deploy
      parameters:
        - name: id
          in: path
          required: true
          description: 模型ID
          schema:
            type: integer
            example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MLModelDeployRequest'
      responses:
        '200':
          description: 部署成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MLModelDeployResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/ml/models/{id}/rollback:
    post:
      tags:
        - dispatch-ml
      summary: 模型回滚
      description: 回滚到指定的模型版本
      operationId: ml_models_rollback
      parameters:
        - name: id
          in: path
          required: true
          description: 模型ID
          schema:
            type: integer
            example: 12345
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MLModelRollbackRequest'
      responses:
        '200':
          description: 回滚成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MLModelRollbackResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '404':
          $ref: '../../global-api-index.yaml#/components/responses/NotFound'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/ml/training/start:
    post:
      tags:
        - dispatch-ml
      summary: 启动模型训练
      description: 启动机器学习模型训练任务
      operationId: ml_training_start
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MLTrainingStartRequest'
      responses:
        '200':
          description: 训练启动成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MLTrainingStartResult'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/statistics:
    get:
      tags:
        - dispatch-monitor
      summary: 获取派单统计数据
      description: 获取派单相关的统计分析数据
      operationId: dispatch_statistics
      parameters:
        - name: type
          in: query
          description: 统计类型
          schema:
            type: string
            enum: [success_rate, response_time, accuracy, workload, satisfaction]
            default: success_rate
            example: "success_rate"
        - name: start_date
          in: query
          description: 开始日期
          schema:
            type: string
            format: date
            example: "2024-08-01"
        - name: end_date
          in: query
          description: 结束日期
          schema:
            type: string
            format: date
            example: "2024-08-31"
        - name: group_by
          in: query
          description: 分组维度
          schema:
            type: string
            enum: [hour, day, week, month]
            default: day
            example: "day"
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchStatistics'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/performance:
    get:
      tags:
        - dispatch-monitor
      summary: 获取性能分析报告
      description: 获取派单系统的性能分析报告
      operationId: dispatch_performance
      parameters:
        - name: metric
          in: query
          description: 性能指标
          schema:
            type: string
            enum: [response_time, throughput, error_rate, algorithm_time]
            default: response_time
            example: "response_time"
        - name: period
          in: query
          description: 时间周期
          schema:
            type: string
            enum: [1h, 6h, 24h, 7d, 30d]
            default: 24h
            example: "24h"
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PerformanceReport'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/predictions:
    get:
      tags:
        - dispatch-monitor
      summary: 获取预测分析数据
      description: 获取派单相关的预测分析数据
      operationId: dispatch_predictions
      parameters:
        - name: prediction_type
          in: query
          description: 预测类型
          schema:
            type: string
            enum: [workload, demand, capacity, efficiency]
            default: workload
            example: "workload"
        - name: forecast_days
          in: query
          description: 预测天数
          schema:
            type: integer
            minimum: 1
            maximum: 30
            default: 7
            example: 7
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PredictionAnalysis'
        '400':
          $ref: '../../global-api-index.yaml#/components/responses/BadRequest'
        '401':
          $ref: '../../global-api-index.yaml#/components/responses/Unauthorized'
        '403':
          $ref: '../../global-api-index.yaml#/components/responses/Forbidden'
        '500':
          $ref: '../../global-api-index.yaml#/components/responses/InternalServerError'

  /api/v1/dispatch/health:
    get:
      tags:
        - dispatch-monitor
      summary: 系统健康检查
      description: 检查派单系统的健康状态
      operationId: dispatch_health
      responses:
        '200':
          description: 系统健康
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HealthStatus'
        '503':
          description: 系统不健康
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '../../global-api-index.yaml#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HealthStatus'

components:
  schemas:
    # 自动派单请求
    AutoDispatchRequest:
      type: object
      required:
        - ticket_id
      properties:
        ticket_id:
          type: integer
          description: 工单ID
          example: 12345
        dispatch_mode:
          type: string
          enum: [auto, smart, rule_based]
          default: auto
          description: 派单模式
          example: "auto"
        constraints:
          type: object
          description: 派单约束条件
          properties:
            required_skills:
              type: array
              items:
                type: string
              description: 必需技能
              example: ["Java", "Spring Boot"]
            preferred_skills:
              type: array
              items:
                type: string
              description: 优选技能
              example: ["微服务", "Docker"]
            max_distance:
              type: number
              description: 最大距离（公里）
              example: 50.0
            exclude_engineers:
              type: array
              items:
                type: integer
              description: 排除的工程师ID
              example: [101, 102]
            customer_preference:
              type: object
              description: 客户偏好
              properties:
                preferred_engineers:
                  type: array
                  items:
                    type: integer
                  description: 偏好工程师ID
                  example: [201, 202]
                language:
                  type: string
                  description: 语言偏好
                  example: "zh-CN"
        algorithm_config:
          type: object
          description: 算法配置
          properties:
            use_ml_model:
              type: boolean
              default: true
              description: 是否使用机器学习模型
              example: true
            model_version:
              type: string
              description: 模型版本
              example: "v2.1.0"
            weights:
              $ref: '#/components/schemas/AlgorithmWeights'
        options:
          type: object
          description: 选项配置
          properties:
            return_candidates:
              type: boolean
              default: false
              description: 是否返回候选人列表
              example: true
            candidate_count:
              type: integer
              minimum: 1
              maximum: 20
              default: 5
              description: 候选人数量
              example: 5
            explain_decision:
              type: boolean
              default: false
              description: 是否解释决策过程
              example: true
            async_mode:
              type: boolean
              default: false
              description: 是否异步模式
              example: false

    # 手动派单请求
    ManualDispatchRequest:
      type: object
      required:
        - ticket_id
        - engineer_id
      properties:
        ticket_id:
          type: integer
          description: 工单ID
          example: 12345
        engineer_id:
          type: integer
          description: 指定工程师ID
          example: 67890
        reason:
          type: string
          description: 手动派单原因
          example: "客户指定工程师"
        priority_override:
          type: boolean
          default: false
          description: 是否覆盖优先级检查
          example: false
        force_assign:
          type: boolean
          default: false
          description: 是否强制分配（忽略负载限制）
          example: false

    # 批量派单请求
    BatchDispatchRequest:
      type: object
      required:
        - tickets
      properties:
        tickets:
          type: array
          maxItems: 1000
          items:
            type: object
            properties:
              ticket_id:
                type: integer
                description: 工单ID
                example: 12345
              priority:
                type: string
                enum: [low, medium, high, urgent]
                description: 优先级
                example: "high"
              constraints:
                type: object
                description: 约束条件
                properties:
                  required_skills:
                    type: array
                    items:
                      type: string
                    example: ["Java"]
                  max_distance:
                    type: number
                    example: 30.0
          description: 工单列表
        batch_config:
          type: object
          description: 批量配置
          properties:
            parallel_processing:
              type: boolean
              default: true
              description: 是否并行处理
              example: true
            max_parallel_count:
              type: integer
              minimum: 1
              maximum: 50
              default: 10
              description: 最大并行数
              example: 10
            timeout_seconds:
              type: integer
              minimum: 60
              maximum: 3600
              default: 300
              description: 超时时间（秒）
              example: 300
            fail_fast:
              type: boolean
              default: false
              description: 是否快速失败
              example: false
        global_constraints:
          type: object
          description: 全局约束
          properties:
            max_workload_per_engineer:
              type: integer
              minimum: 1
              maximum: 20
              default: 5
              description: 每个工程师最大工作负载
              example: 5
            balance_workload:
              type: boolean
              default: true
              description: 是否均衡负载
              example: true

    # 重新派单请求
    ReassignRequest:
      type: object
      properties:
        reason:
          type: string
          description: 重新派单原因
          example: "原工程师不可用"
        new_engineer_id:
          type: integer
          description: 新工程师ID（可选）
          example: 78901
        exclude_previous:
          type: boolean
          default: true
          description: 是否排除之前的工程师
          example: true
        use_smart_algorithm:
          type: boolean
          default: true
          description: 是否使用智能算法
          example: true

    # 撤销派单请求
    CancelDispatchRequest:
      type: object
      required:
        - reason
      properties:
        reason:
          type: string
          description: 撤销原因
          example: "工单已取消"
        notify_engineer:
          type: boolean
          default: true
          description: 是否通知工程师
          example: true

    # 候选工程师请求
    CandidatesRequest:
      type: object
      required:
        - ticket_id
      properties:
        ticket_id:
          type: integer
          description: 工单ID
          example: 12345
        limit:
          type: integer
          minimum: 1
          maximum: 50
          default: 10
          description: 返回候选人数量
          example: 10
        include_scores:
          type: boolean
          default: true
          description: 是否包含评分详情
          example: true
        include_explanation:
          type: boolean
          default: false
          description: 是否包含评分解释
          example: false

    # 派单结果
    DispatchResult:
      type: object
      properties:
        dispatch_id:
          type: string
          description: 派单ID
          example: "dp_20240814_001"
        ticket_id:
          type: integer
          description: 工单ID
          example: 12345
        selected_engineer:
          type: object
          description: 选中的工程师
          properties:
            engineer_id:
              type: integer
              description: 工程师ID
              example: 201
            engineer_name:
              type: string
              description: 工程师姓名
              example: "张工程师"
            match_score:
              type: number
              description: 匹配评分
              example: 92.5
            estimated_completion_time:
              type: string
              format: date-time
              description: 预计完成时间
              example: "2024-08-14T18:00:00Z"
        decision_explanation:
          type: object
          description: 决策解释
          properties:
            total_score:
              type: number
              description: 总评分
              example: 92.5
            score_breakdown:
              type: object
              description: 评分明细
              properties:
                skill_match:
                  type: number
                  description: 技能匹配评分
                  example: 95.0
                workload:
                  type: number
                  description: 负载评分
                  example: 88.0
                location:
                  type: number
                  description: 位置评分
                  example: 90.0
                performance:
                  type: number
                  description: 绩效评分
                  example: 94.0
                sla_priority:
                  type: number
                  description: SLA优先级评分
                  example: 85.0
            decision_factors:
              type: array
              items:
                type: string
              description: 决策因素
              example:
                - "技能匹配度极高（Java专家级别）"
                - "当前负载适中（2个工单）"
                - "地理位置优势（距离15公里）"
                - "历史绩效优秀（满意度4.8分）"
        candidates:
          type: array
          items:
            type: object
            properties:
              engineer_id:
                type: integer
                description: 工程师ID
                example: 202
              engineer_name:
                type: string
                description: 工程师姓名
                example: "李工程师"
              match_score:
                type: number
                description: 匹配评分
                example: 89.2
              rank:
                type: integer
                description: 排名
                example: 2
          description: 候选工程师列表
        algorithm_info:
          type: object
          description: 算法信息
          properties:
            algorithm_version:
              type: string
              description: 算法版本
              example: "v2.1.0"
            execution_time:
              type: integer
              description: 执行时间（毫秒）
              example: 1250
            candidate_pool_size:
              type: integer
              description: 候选池大小
              example: 15
            model_confidence:
              type: number
              description: 模型置信度
              example: 0.92

    # 算法权重配置
    AlgorithmWeights:
      type: object
      properties:
        skill_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 技能权重
          example: 0.35
        workload_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 负载权重
          example: 0.25
        location_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 位置权重
          example: 0.15
        performance_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 绩效权重
          example: 0.15
        sla_weight:
          type: number
          minimum: 0
          maximum: 1
          description: SLA权重
          example: 0.10
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2024-08-14T10:30:00Z"
        updated_by:
          type: string
          description: 更新人
          example: "admin"

    # 算法权重更新请求
    AlgorithmWeightsUpdateRequest:
      type: object
      required:
        - skill_weight
        - workload_weight
        - location_weight
        - performance_weight
        - sla_weight
      properties:
        skill_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 技能权重
          example: 0.40
        workload_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 负载权重
          example: 0.25
        location_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 位置权重
          example: 0.15
        performance_weight:
          type: number
          minimum: 0
          maximum: 1
          description: 绩效权重
          example: 0.15
        sla_weight:
          type: number
          minimum: 0
          maximum: 1
          description: SLA权重
          example: 0.05
        reason:
          type: string
          description: 更新原因
          example: "优化技能匹配权重"

    # 派单规则
    DispatchRule:
      type: object
      properties:
        id:
          type: integer
          description: 规则ID
          example: 12345
        rule_name:
          type: string
          description: 规则名称
          example: "VIP客户优先派单"
        rule_type:
          type: string
          enum: [FILTER, WEIGHT, PRIORITY, CONSTRAINT]
          description: 规则类型
          example: "PRIORITY"
        rule_category:
          type: string
          description: 规则分类
          example: "customer_priority"
        conditions:
          type: object
          description: 触发条件
          example:
            customer_level: "VIP"
            priority: ["high", "urgent"]
        actions:
          type: object
          description: 执行动作
          example:
            weight_multiplier: 1.5
            max_response_time: 300
        priority:
          type: integer
          description: 规则优先级
          example: 10
        weight:
          type: number
          description: 规则权重
          example: 1.0
        is_enabled:
          type: boolean
          description: 是否启用
          example: true
        execution_count:
          type: integer
          description: 执行次数
          example: 156
        success_count:
          type: integer
          description: 成功次数
          example: 152
        last_execution_time:
          type: string
          format: date-time
          description: 最后执行时间
          example: "2024-08-14T10:30:00Z"
        effective_start_time:
          type: string
          format: date-time
          description: 生效开始时间
          example: "2024-08-01T00:00:00Z"
        effective_end_time:
          type: string
          format: date-time
          description: 生效结束时间
          example: "2024-12-31T23:59:59Z"
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2024-08-01T10:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2024-08-14T10:30:00Z"

    # 派单规则创建请求
    DispatchRuleCreateRequest:
      type: object
      required:
        - rule_name
        - rule_type
        - conditions
        - actions
      properties:
        rule_name:
          type: string
          maxLength: 100
          description: 规则名称
          example: "紧急工单快速派单"
        rule_type:
          type: string
          enum: [FILTER, WEIGHT, PRIORITY, CONSTRAINT]
          description: 规则类型
          example: "PRIORITY"
        rule_category:
          type: string
          maxLength: 50
          description: 规则分类
          example: "urgency_handling"
        conditions:
          type: object
          description: 触发条件
          example:
            priority: ["urgent"]
            sla_level: ["gold", "platinum"]
        actions:
          type: object
          description: 执行动作
          example:
            max_response_time: 180
            preferred_skill_level: 3
        priority:
          type: integer
          minimum: 0
          default: 100
          description: 规则优先级
          example: 5
        weight:
          type: number
          minimum: 0
          default: 1.0
          description: 规则权重
          example: 1.2
        effective_start_time:
          type: string
          format: date-time
          description: 生效开始时间
          example: "2024-08-15T00:00:00Z"
        effective_end_time:
          type: string
          format: date-time
          description: 生效结束时间
          example: "2024-12-31T23:59:59Z"

    # 派单规则更新请求
    DispatchRuleUpdateRequest:
      type: object
      properties:
        rule_name:
          type: string
          maxLength: 100
          description: 规则名称
          example: "紧急工单快速派单（已优化）"
        conditions:
          type: object
          description: 触发条件
          example:
            priority: ["urgent"]
            sla_level: ["gold", "platinum"]
            business_hours: true
        actions:
          type: object
          description: 执行动作
          example:
            max_response_time: 120
            preferred_skill_level: 3
            notify_manager: true
        priority:
          type: integer
          minimum: 0
          description: 规则优先级
          example: 3
        weight:
          type: number
          minimum: 0
          description: 规则权重
          example: 1.5
        is_enabled:
          type: boolean
          description: 是否启用
          example: true
        effective_start_time:
          type: string
          format: date-time
          description: 生效开始时间
          example: "2024-08-15T00:00:00Z"
        effective_end_time:
          type: string
          format: date-time
          description: 生效结束时间
          example: "2024-12-31T23:59:59Z"

    # 派单策略
    DispatchStrategy:
      type: object
      properties:
        strategy_name:
          type: string
          description: 策略名称
          example: "智能均衡策略"
        algorithm_type:
          type: string
          enum: [ML_BASED, RULE_BASED, HYBRID]
          description: 算法类型
          example: "HYBRID"
        decision_mode:
          type: string
          enum: [OPTIMAL, BALANCED, FAST]
          description: 决策模式
          example: "BALANCED"
        fallback_strategy:
          type: string
          enum: [RULE_ENGINE, ROUND_ROBIN, MANUAL]
          description: 降级策略
          example: "RULE_ENGINE"
        timeout_seconds:
          type: integer
          description: 超时时间（秒）
          example: 180
        max_candidates:
          type: integer
          description: 最大候选人数
          example: 20
        enable_ab_testing:
          type: boolean
          description: 是否启用A/B测试
          example: true
        ab_testing_ratio:
          type: number
          description: A/B测试比例
          example: 0.2
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2024-08-14T10:30:00Z"

    # 派单策略更新请求
    DispatchStrategyUpdateRequest:
      type: object
      properties:
        strategy_name:
          type: string
          description: 策略名称
          example: "智能均衡策略v2"
        algorithm_type:
          type: string
          enum: [ML_BASED, RULE_BASED, HYBRID]
          description: 算法类型
          example: "HYBRID"
        decision_mode:
          type: string
          enum: [OPTIMAL, BALANCED, FAST]
          description: 决策模式
          example: "OPTIMAL"
        fallback_strategy:
          type: string
          enum: [RULE_ENGINE, ROUND_ROBIN, MANUAL]
          description: 降级策略
          example: "RULE_ENGINE"
        timeout_seconds:
          type: integer
          minimum: 30
          maximum: 600
          description: 超时时间（秒）
          example: 120
        max_candidates:
          type: integer
          minimum: 5
          maximum: 50
          description: 最大候选人数
          example: 15
        enable_ab_testing:
          type: boolean
          description: 是否启用A/B测试
          example: false
        ab_testing_ratio:
          type: number
          minimum: 0
          maximum: 1
          description: A/B测试比例
          example: 0.1

    # 机器学习模型
    MLModel:
      type: object
      properties:
        id:
          type: integer
          description: 模型ID
          example: 12345
        model_name:
          type: string
          description: 模型名称
          example: "dispatch_xgboost_v2"
        model_type:
          type: string
          enum: [XGBOOST, DNN, ENSEMBLE]
          description: 模型类型
          example: "XGBOOST"
        version:
          type: string
          description: 模型版本
          example: "v2.1.0"
        model_config:
          type: object
          description: 模型配置
          example:
            max_depth: 6
            learning_rate: 0.1
            n_estimators: 100
        feature_config:
          type: object
          description: 特征配置
          example:
            feature_count: 128
            categorical_features: ["skill_category", "customer_level"]
            numerical_features: ["experience_years", "success_rate"]
        training_config:
          type: object
          description: 训练配置
          example:
            train_ratio: 0.7
            validation_ratio: 0.15
            test_ratio: 0.15
        model_path:
          type: string
          description: 模型文件路径
          example: "/models/dispatch_xgboost_v2.1.0.pkl"
        model_size:
          type: integer
          description: 模型文件大小（字节）
          example: 2048576
        training_data_size:
          type: integer
          description: 训练数据量
          example: 100000
        training_start_time:
          type: string
          format: date-time
          description: 训练开始时间
          example: "2024-08-14T08:00:00Z"
        training_end_time:
          type: string
          format: date-time
          description: 训练结束时间
          example: "2024-08-14T09:30:00Z"
        training_duration:
          type: integer
          description: 训练耗时（秒）
          example: 5400
        accuracy:
          type: number
          description: 准确率
          example: 0.8856
        precision_score:
          type: number
          description: 精确率
          example: 0.8923
        recall_score:
          type: number
          description: 召回率
          example: 0.8789
        f1_score:
          type: number
          description: F1分数
          example: 0.8855
        auc_score:
          type: number
          description: AUC分数
          example: 0.9234
        is_active:
          type: boolean
          description: 是否激活
          example: true
        deployment_time:
          type: string
          format: date-time
          description: 部署时间
          example: "2024-08-14T10:00:00Z"
        prediction_count:
          type: integer
          description: 预测次数
          example: 15678
        avg_prediction_time:
          type: number
          description: 平均预测时间（毫秒）
          example: 12.5
        error_count:
          type: integer
          description: 错误次数
          example: 23
        created_at:
          type: string
          format: date-time
          description: 创建时间
          example: "2024-08-14T08:00:00Z"
        updated_at:
          type: string
          format: date-time
          description: 更新时间
          example: "2024-08-14T10:30:00Z"

    # 批量派单结果
    BatchDispatchResult:
      type: object
      properties:
        batch_id:
          type: string
          description: 批次ID
          example: "batch_20240814_001"
        total:
          type: integer
          description: 总数量
          example: 100
        success_count:
          type: integer
          description: 成功数量
          example: 95
        failed_count:
          type: integer
          description: 失败数量
          example: 5
        processing_time:
          type: integer
          description: 处理时间（毫秒）
          example: 45000
        results:
          type: array
          items:
            type: object
            properties:
              ticket_id:
                type: integer
                description: 工单ID
                example: 12345
              success:
                type: boolean
                description: 是否成功
                example: true
              dispatch_id:
                type: string
                description: 派单ID（成功时）
                example: "dp_20240814_001"
              engineer_id:
                type: integer
                description: 工程师ID（成功时）
                example: 67890
              error:
                type: string
                description: 错误信息（失败时）
                example: "无可用工程师"
          description: 详细结果

    # 无可用工程师响应
    NoEngineerAvailableResponse:
      type: object
      properties:
        reason:
          type: string
          enum: [NO_QUALIFIED_ENGINEERS, ALL_ENGINEERS_BUSY, CONSTRAINT_TOO_STRICT, SYSTEM_ERROR]
          description: 无可用工程师的原因
          example: "NO_QUALIFIED_ENGINEERS"
        constraints_checked:
          type: object
          description: 已检查的约束条件
          properties:
            skill_requirements:
              type: array
              items:
                type: string
              description: 技能要求
              example: ["Java", "Spring Boot"]
            max_distance:
              type: number
              description: 最大距离
              example: 50.0
            max_workload:
              type: integer
              description: 最大工作负载
              example: 5
        suggestions:
          type: array
          items:
            type: string
          description: 建议
          example:
            - "放宽技能要求到相关技能"
            - "增加最大距离限制到100公里"
            - "考虑增加工程师工作负载上限"
        fallback_options:
          type: object
          description: 备选方案
          properties:
            manual_assignment:
              type: boolean
              description: 手动分配
              example: true
            queue_for_later:
              type: boolean
              description: 排队等待
              example: true
            escalate_to_manager:
              type: boolean
              description: 升级到管理员
              example: true

    # 候选工程师结果
    CandidatesResult:
      type: object
      properties:
        ticket_id:
          type: integer
          description: 工单ID
          example: 12345
        total_candidates:
          type: integer
          description: 候选人总数
          example: 15
        returned_count:
          type: integer
          description: 返回数量
          example: 10
        candidates:
          type: array
          items:
            type: object
            properties:
              engineer_id:
                type: integer
                description: 工程师ID
                example: 201
              engineer_name:
                type: string
                description: 工程师姓名
                example: "张工程师"
              total_score:
                type: number
                description: 总评分
                example: 92.5
              rank:
                type: integer
                description: 排名
                example: 1
              availability:
                type: string
                enum: [AVAILABLE, BUSY, OFFLINE]
                description: 可用状态
                example: "AVAILABLE"
              current_workload:
                type: integer
                description: 当前工作负载
                example: 2
              estimated_response_time:
                type: integer
                description: 预计响应时间（分钟）
                example: 15
              score_details:
                type: object
                description: 评分详情
                properties:
                  skill_match:
                    type: number
                    example: 95.0
                  workload:
                    type: number
                    example: 88.0
                  location:
                    type: number
                    example: 90.0
                  performance:
                    type: number
                    example: 94.0
                  sla_priority:
                    type: number
                    example: 85.0
          description: 候选工程师列表

    # 派单统计
    DispatchStatistics:
      type: object
      properties:
        type:
          type: string
          description: 统计类型
          example: "success_rate"
        period:
          type: object
          description: 统计周期
          properties:
            start_date:
              type: string
              format: date
              description: 开始日期
              example: "2024-08-01"
            end_date:
              type: string
              format: date
              description: 结束日期
              example: "2024-08-31"
        summary:
          type: object
          description: 汇总数据
          properties:
            total_dispatches:
              type: integer
              description: 总派单数
              example: 1567
            success_rate:
              type: number
              description: 成功率
              example: 0.956
            avg_response_time:
              type: number
              description: 平均响应时间（秒）
              example: 125.5
            avg_accuracy:
              type: number
              description: 平均准确率
              example: 0.892
        trend_data:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                description: 日期
                example: "2024-08-14"
              value:
                type: number
                description: 数值
                example: 0.95
              count:
                type: integer
                description: 数量
                example: 45
          description: 趋势数据

    # 性能报告
    PerformanceReport:
      type: object
      properties:
        metric:
          type: string
          description: 性能指标
          example: "response_time"
        period:
          type: string
          description: 时间周期
          example: "24h"
        current_value:
          type: number
          description: 当前值
          example: 125.5
        target_value:
          type: number
          description: 目标值
          example: 180.0
        trend:
          type: string
          enum: [IMPROVING, STABLE, DEGRADING]
          description: 趋势
          example: "IMPROVING"
        percentiles:
          type: object
          description: 百分位数
          properties:
            p50:
              type: number
              example: 98.5
            p90:
              type: number
              example: 156.2
            p95:
              type: number
              example: 189.7
            p99:
              type: number
              example: 245.8
        time_series:
          type: array
          items:
            type: object
            properties:
              timestamp:
                type: string
                format: date-time
                description: 时间戳
                example: "2024-08-14T10:00:00Z"
              value:
                type: number
                description: 值
                example: 123.5
          description: 时间序列数据

    # 预测分析
    PredictionAnalysis:
      type: object
      properties:
        prediction_type:
          type: string
          description: 预测类型
          example: "workload"
        forecast_days:
          type: integer
          description: 预测天数
          example: 7
        confidence_level:
          type: number
          description: 置信度
          example: 0.85
        predictions:
          type: array
          items:
            type: object
            properties:
              date:
                type: string
                format: date
                description: 日期
                example: "2024-08-15"
              predicted_value:
                type: number
                description: 预测值
                example: 156.8
              confidence_interval:
                type: object
                description: 置信区间
                properties:
                  lower:
                    type: number
                    example: 142.3
                  upper:
                    type: number
                    example: 171.3
          description: 预测数据
        recommendations:
          type: array
          items:
            type: string
          description: 建议
          example:
            - "预计明天工作负载较高，建议提前调配资源"
            - "周末工作负载较低，可安排系统维护"

    # 健康状态
    HealthStatus:
      type: object
      properties:
        overall_status:
          type: string
          enum: [HEALTHY, WARNING, CRITICAL]
          description: 整体状态
          example: "HEALTHY"
        components:
          type: object
          description: 组件状态
          properties:
            dispatch_engine:
              type: object
              properties:
                status:
                  type: string
                  enum: [UP, DOWN, DEGRADED]
                  example: "UP"
                response_time:
                  type: number
                  description: 响应时间（毫秒）
                  example: 125.5
                error_rate:
                  type: number
                  description: 错误率
                  example: 0.002
            ml_service:
              type: object
              properties:
                status:
                  type: string
                  enum: [UP, DOWN, DEGRADED]
                  example: "UP"
                model_accuracy:
                  type: number
                  description: 模型准确率
                  example: 0.885
                prediction_time:
                  type: number
                  description: 预测时间（毫秒）
                  example: 12.5
            rule_engine:
              type: object
              properties:
                status:
                  type: string
                  enum: [UP, DOWN, DEGRADED]
                  example: "UP"
                rules_loaded:
                  type: integer
                  description: 已加载规则数
                  example: 25
                execution_time:
                  type: number
                  description: 执行时间（毫秒）
                  example: 8.2
        last_check_time:
          type: string
          format: date-time
          description: 最后检查时间
          example: "2024-08-14T10:30:00Z"

    # ML模型创建请求（简化版，其他请求模型类似）
    MLModelCreateRequest:
      type: object
      required:
        - model_name
        - model_type
      properties:
        model_name:
          type: string
          description: 模型名称
          example: "dispatch_xgboost_v3"
        model_type:
          type: string
          enum: [XGBOOST, DNN, ENSEMBLE]
          description: 模型类型
          example: "XGBOOST"
        model_config:
          type: object
          description: 模型配置
          example:
            max_depth: 8
            learning_rate: 0.05
            n_estimators: 200

    # ML模型部署请求
    MLModelDeployRequest:
      type: object
      properties:
        deployment_mode:
          type: string
          enum: [FULL, AB_TEST, CANARY]
          default: FULL
          description: 部署模式
          example: "AB_TEST"
        ab_test_ratio:
          type: number
          minimum: 0
          maximum: 1
          description: A/B测试比例
          example: 0.2

    # ML模型部署结果
    MLModelDeployResult:
      type: object
      properties:
        deployment_id:
          type: string
          description: 部署ID
          example: "deploy_20240814_001"
        status:
          type: string
          enum: [SUCCESS, FAILED, IN_PROGRESS]
          description: 部署状态
          example: "SUCCESS"
        deployment_time:
          type: string
          format: date-time
          description: 部署时间
          example: "2024-08-14T10:30:00Z"

    # ML模型回滚请求
    MLModelRollbackRequest:
      type: object
      required:
        - target_version
      properties:
        target_version:
          type: string
          description: 目标版本
          example: "v2.0.0"
        reason:
          type: string
          description: 回滚原因
          example: "新版本准确率下降"

    # ML模型回滚结果
    MLModelRollbackResult:
      type: object
      properties:
        rollback_id:
          type: string
          description: 回滚ID
          example: "rollback_20240814_001"
        status:
          type: string
          enum: [SUCCESS, FAILED, IN_PROGRESS]
          description: 回滚状态
          example: "SUCCESS"
        rollback_time:
          type: string
          format: date-time
          description: 回滚时间
          example: "2024-08-14T11:00:00Z"

    # ML训练启动请求
    MLTrainingStartRequest:
      type: object
      required:
        - model_name
        - training_config
      properties:
        model_name:
          type: string
          description: 模型名称
          example: "dispatch_xgboost_v3"
        training_config:
          type: object
          description: 训练配置
          example:
            data_start_date: "2024-06-01"
            data_end_date: "2024-08-01"
            train_ratio: 0.7
            validation_ratio: 0.15

    # ML训练启动结果
    MLTrainingStartResult:
      type: object
      properties:
        training_job_id:
          type: string
          description: 训练任务ID
          example: "train_20240814_001"
        status:
          type: string
          enum: [STARTED, FAILED]
          description: 启动状态
          example: "STARTED"
        estimated_duration:
          type: integer
          description: 预计耗时（分钟）
          example: 90

    # 撤销派单结果
    CancelDispatchResult:
      type: object
      properties:
        dispatch_id:
          type: string
          description: 派单ID
          example: "dp_20240814_001"
        status:
          type: string
          enum: [CANCELLED, FAILED]
          description: 撤销状态
          example: "CANCELLED"
        cancelled_at:
          type: string
          format: date-time
          description: 撤销时间
          example: "2024-08-14T11:00:00Z"
