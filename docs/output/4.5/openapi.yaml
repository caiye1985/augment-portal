openapi: 3.0.3
info:
  title: IT运维门户系统 API
  description: |
    IT运维门户系统的完整API文档，提供多租户SaaS运维服务管理功能。
    
    ## 认证方式
    使用Bearer Token (JWT)进行认证，在请求头中添加：
    ```
    Authorization: Bearer {access_token}
    ```
    
    ## 统一响应格式
    所有API响应均采用统一的Result<T>格式：
    ```json
    {
      "code": 200,
      "message": "操作成功",
      "data": {},
      "timestamp": "2025-08-13T10:30:00Z",
      "trace_id": "abc123def456"
    }
    ```
    
    ## 错误码说明
    - 200: 成功
    - 400: 请求参数错误
    - 401: 未认证或认证失败
    - 403: 权限不足
    - 404: 资源不存在
    - 429: 请求频率超限
    - 500: 服务器内部错误
    
  version: "4.5"
  contact:
    name: IT运维门户系统团队
    email: api-support@ops-portal.com
    url: https://docs.ops-portal.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.ops-portal.com/api/v1
    description: 生产环境
  - url: https://test-api.ops-portal.com/api/v1
    description: 测试环境
  - url: http://localhost:8080/api/v1
    description: 开发环境

security:
  - BearerAuth: []

tags:
  - name: REQ-001 基础架构
    description: 多租户架构、统一认证、权限管理、数据存储等基础服务
  - name: REQ-002 工作台仪表板
    description: 个性化工作台、实时数据仪表板、任务中心、快速导航
  - name: REQ-003 工单管理
    description: 工单全生命周期管理、状态流转、评论沟通、附件管理
  - name: REQ-004 智能派单
    description: AI算法自动派单、技能匹配、负载均衡、派单规则

paths:
  # ==================== REQ-001 基础架构模块 ====================
  
  /auth/login:
    post:
      tags:
        - REQ-001 基础架构
      summary: 用户登录
      description: |
        用户登录认证，支持多种认证方式：
        - 用户名密码
        - 手机验证码
        - 企业SSO
        
        **REQ-ID**: REQ-001-002
      operationId: userLogin
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - tenant_code
                - username
                - password
                - auth_type
              properties:
                tenant_code:
                  type: string
                  description: 租户编码
                  example: "demo_company"
                username:
                  type: string
                  description: 用户名
                  example: "admin"
                password:
                  type: string
                  description: 密码
                  example: "password123"
                auth_type:
                  type: string
                  enum: [password, sms, sso]
                  description: 认证类型
                  example: "password"
                remember_me:
                  type: boolean
                  description: 记住登录状态
                  default: false
                captcha_code:
                  type: string
                  description: 验证码
                  example: "1234"
                captcha_key:
                  type: string
                  description: 验证码密钥
                  example: "captcha_key_123"
      responses:
        '200':
          description: 登录成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/LoginResponse'
        '40001':
          description: 用户名或密码错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '40002':
          description: 账户已被锁定
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '40003':
          description: 租户不存在或已停用
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /auth/refresh:
    post:
      tags:
        - REQ-001 基础架构
      summary: 刷新令牌
      description: |
        使用refresh_token刷新access_token
        
        **REQ-ID**: REQ-001-002
      operationId: refreshToken
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refresh_token
              properties:
                refresh_token:
                  type: string
                  description: 刷新令牌
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: 刷新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TokenResponse'

  /auth/logout:
    post:
      tags:
        - REQ-001 基础架构
      summary: 用户登出
      description: |
        用户登出，清除会话信息
        
        **REQ-ID**: REQ-001-002
      operationId: userLogout
      responses:
        '200':
          description: 登出成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /auth/me:
    get:
      tags:
        - REQ-001 基础架构
      summary: 获取当前用户信息
      description: |
        获取当前登录用户的详细信息
        
        **REQ-ID**: REQ-001-002
      operationId: getCurrentUser
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserInfo'

  /admin/tenants:
    get:
      tags:
        - REQ-001 基础架构
      summary: 查询租户列表
      description: |
        查询系统中的租户列表，支持分页和筛选
        
        **REQ-ID**: REQ-001-001
        **权限要求**: system:tenant:read
      operationId: getTenants
      parameters:
        - name: page
          in: query
          description: 页码
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: 每页大小
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: 状态筛选
          schema:
            type: integer
            enum: [1, 2, 3]
            description: "1-正常，2-停用，3-过期"
        - name: keyword
          in: query
          description: 搜索关键词
          schema:
            type: string
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TenantListResponse'

    post:
      tags:
        - REQ-001 基础架构
      summary: 创建租户
      description: |
        创建新的租户，包括租户基本信息和管理员账户
        
        **REQ-ID**: REQ-001-001
        **权限要求**: system:tenant:create
      operationId: createTenant
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTenantRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Tenant'

  /admin/tenants/{id}:
    put:
      tags:
        - REQ-001 基础架构
      summary: 更新租户信息
      description: |
        更新指定租户的信息
        
        **REQ-ID**: REQ-001-001
        **权限要求**: system:tenant:update
      operationId: updateTenant
      parameters:
        - name: id
          in: path
          required: true
          description: 租户ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTenantRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Tenant'

    delete:
      tags:
        - REQ-001 基础架构
      summary: 删除租户
      description: |
        删除指定租户（软删除）
        
        **REQ-ID**: REQ-001-001
        **权限要求**: system:tenant:delete
      operationId: deleteTenant
      parameters:
        - name: id
          in: path
          required: true
          description: 租户ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 删除成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'

  /users:
    get:
      tags:
        - REQ-001 基础架构
      summary: 查询用户列表
      description: |
        查询当前租户下的用户列表
        
        **REQ-ID**: REQ-001-003
        **权限要求**: user:read
      operationId: getUsers
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: status
          in: query
          description: 状态筛选
          schema:
            type: integer
            enum: [1, 2, 3]
        - name: role_id
          in: query
          description: 角色筛选
          schema:
            type: integer
            format: int64
        - name: keyword
          in: query
          description: 搜索关键词
          schema:
            type: string
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserListResponse'

    post:
      tags:
        - REQ-001 基础架构
      summary: 创建用户
      description: |
        创建新用户
        
        **REQ-ID**: REQ-001-003
        **权限要求**: user:create
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

  # ==================== REQ-002 工作台仪表板模块 ====================
  
  /dashboard/config:
    get:
      tags:
        - REQ-002 工作台仪表板
      summary: 获取工作台配置
      description: |
        获取用户的工作台配置信息
        
        **REQ-ID**: REQ-002-001
        **权限要求**: dashboard:read
      operationId: getDashboardConfig
      parameters:
        - name: user_id
          in: query
          description: 用户ID（可选，默认当前用户）
          schema:
            type: integer
            format: int64
        - name: config_name
          in: query
          description: 配置名称（可选，默认获取默认配置）
          schema:
            type: string
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DashboardConfig'

    post:
      tags:
        - REQ-002 工作台仪表板
      summary: 保存工作台配置
      description: |
        保存用户的工作台配置
        
        **REQ-ID**: REQ-002-001
        **权限要求**: dashboard:write
      operationId: saveDashboardConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SaveDashboardConfigRequest'
      responses:
        '200':
          description: 保存成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          config_id:
                            type: integer
                            format: int64

  /dashboard/statistics:
    get:
      tags:
        - REQ-002 工作台仪表板
      summary: 获取仪表板统计数据
      description: |
        获取仪表板的统计数据和趋势分析
        
        **REQ-ID**: REQ-002-002
        **权限要求**: dashboard:read
      operationId: getDashboardStatistics
      parameters:
        - name: time_range
          in: query
          description: 时间范围
          schema:
            type: string
            enum: [1d, 7d, 30d, 90d]
            default: "7d"
        - name: metrics
          in: query
          description: 指标类型（多个用逗号分隔）
          schema:
            type: string
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DashboardStatistics'

  # ==================== REQ-003 工单管理模块 ====================
  
  /tickets:
    get:
      tags:
        - REQ-003 工单管理
      summary: 查询工单列表
      description: |
        查询工单列表，支持多种筛选条件和排序
        
        **REQ-ID**: REQ-003-002
        **权限要求**: ticket:read
      operationId: getTickets
      parameters:
        - name: status
          in: query
          description: 状态筛选
          schema:
            type: string
            enum: [pending, assigned, in_progress, resolved, closed]
        - name: priority
          in: query
          description: 优先级筛选
          schema:
            type: string
            enum: [urgent, high, medium, low]
        - name: category
          in: query
          description: 分类筛选
          schema:
            type: string
        - name: assigned_to
          in: query
          description: 指派人筛选
          schema:
            type: integer
            format: int64
        - name: customer_id
          in: query
          description: 客户筛选
          schema:
            type: integer
            format: int64
        - name: created_start
          in: query
          description: 创建时间开始
          schema:
            type: string
            format: date-time
        - name: created_end
          in: query
          description: 创建时间结束
          schema:
            type: string
            format: date-time
        - name: keyword
          in: query
          description: 关键词搜索
          schema:
            type: string
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: sort
          in: query
          description: 排序字段
          schema:
            type: string
            default: "created_at"
        - name: order
          in: query
          description: 排序方向
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TicketListResponse'

    post:
      tags:
        - REQ-003 工单管理
      summary: 创建工单
      description: |
        创建新的工单
        
        **REQ-ID**: REQ-003-001
        **权限要求**: ticket:create
      operationId: createTicket
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTicketRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CreateTicketResponse'

  /tickets/{id}:
    get:
      tags:
        - REQ-003 工单管理
      summary: 获取工单详情
      description: |
        获取指定工单的详细信息
        
        **REQ-ID**: REQ-003-002
        **权限要求**: ticket:read
      operationId: getTicketDetail
      parameters:
        - name: id
          in: path
          required: true
          description: 工单ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TicketDetail'

  # ==================== REQ-004 智能派单模块 ====================
  
  /dispatch/intelligent:
    post:
      tags:
        - REQ-004 智能派单
      summary: 执行智能派单
      description: |
        使用AI算法为工单执行智能派单
        
        **REQ-ID**: REQ-004-001
        **权限要求**: dispatch:execute
      operationId: executeIntelligentDispatch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IntelligentDispatchRequest'
      responses:
        '200':
          description: 派单成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchResult'

  /dispatch/suggestions/{ticket_id}:
    get:
      tags:
        - REQ-004 智能派单
      summary: 获取派单建议
      description: |
        获取指定工单的派单建议列表
        
        **REQ-ID**: REQ-004-001
        **权限要求**: dispatch:read
      operationId: getDispatchSuggestions
      parameters:
        - name: ticket_id
          in: path
          required: true
          description: 工单ID
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: 建议数量限制
          schema:
            type: integer
            minimum: 1
            maximum: 10
            default: 5
        - name: strategy
          in: query
          description: 派单策略
          schema:
            type: string
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/DispatchSuggestions'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # ==================== 通用响应结构 ====================
    
    ApiResponse:
      type: object
      required:
        - code
        - message
        - timestamp
      properties:
        code:
          type: integer
          description: 响应码
          example: 200
        message:
          type: string
          description: 响应消息
          example: "操作成功"
        data:
          type: object
          description: 响应数据
        timestamp:
          type: string
          format: date-time
          description: 响应时间戳
          example: "2025-08-13T10:30:00Z"
        trace_id:
          type: string
          description: 请求追踪ID
          example: "abc123def456"

    ApiError:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: object
              nullable: true

    PaginationResponse:
      type: object
      required:
        - total
        - page
        - size
        - items
      properties:
        total:
          type: integer
          description: 总记录数
          example: 100
        page:
          type: integer
          description: 当前页码
          example: 1
        size:
          type: integer
          description: 每页大小
          example: 20
        items:
          type: array
          description: 数据列表
          items:
            type: object

    # ==================== REQ-001 基础架构相关 ====================
    
    LoginResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - expires_in
        - user_info
      properties:
        access_token:
          type: string
          description: 访问令牌
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          description: 刷新令牌
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        expires_in:
          type: integer
          description: 令牌有效期（秒）
          example: 7200
        user_info:
          $ref: '#/components/schemas/UserInfo'

    TokenResponse:
      type: object
      required:
        - access_token
        - expires_in
      properties:
        access_token:
          type: string
          description: 新的访问令牌
        expires_in:
          type: integer
          description: 令牌有效期（秒）

    UserInfo:
      type: object
      required:
        - id
        - username
        - tenant_id
        - roles
        - permissions
      properties:
        id:
          type: integer
          format: int64
          description: 用户ID
          example: 1001
        username:
          type: string
          description: 用户名
          example: "admin"
        real_name:
          type: string
          description: 真实姓名
          example: "系统管理员"
        email:
          type: string
          format: email
          description: 邮箱
          example: "admin@demo.com"
        avatar_url:
          type: string
          format: uri
          description: 头像URL
          example: "https://cdn.example.com/avatar/admin.jpg"
        tenant_id:
          type: integer
          format: int64
          description: 租户ID
          example: 1
        tenant_name:
          type: string
          description: 租户名称
          example: "演示公司"
        roles:
          type: array
          description: 用户角色
          items:
            type: string
          example: ["admin", "user"]
        permissions:
          type: array
          description: 用户权限
          items:
            type: string
          example: ["user:read", "user:write", "system:config"]

    Tenant:
      type: object
      required:
        - id
        - tenant_code
        - tenant_name
        - status
      properties:
        id:
          type: integer
          format: int64
          description: 租户ID
        tenant_code:
          type: string
          description: 租户编码
          example: "demo_company"
        tenant_name:
          type: string
          description: 租户名称
          example: "演示公司"
        domain:
          type: string
          description: 租户域名
          example: "demo.example.com"
        status:
          type: integer
          description: 状态：1-正常，2-停用，3-过期
          enum: [1, 2, 3]
          example: 1
        max_users:
          type: integer
          description: 最大用户数
          example: 500
        current_users:
          type: integer
          description: 当前用户数
          example: 89
        expire_time:
          type: string
          format: date-time
          description: 过期时间
          example: "2024-12-31T23:59:59Z"
        created_at:
          type: string
          format: date-time
          description: 创建时间
        config:
          type: object
          description: 租户配置
          properties:
            theme:
              type: string
              example: "default"
            logo_url:
              type: string
              format: uri
              example: "https://cdn.example.com/logo.png"

    TenantListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Tenant'

    CreateTenantRequest:
      type: object
      required:
        - tenant_code
        - tenant_name
        - max_users
        - admin_username
        - admin_password
        - admin_email
      properties:
        tenant_code:
          type: string
          description: 租户编码
          example: "new_company"
        tenant_name:
          type: string
          description: 租户名称
          example: "新公司"
        domain:
          type: string
          description: 租户域名
          example: "new.example.com"
        max_users:
          type: integer
          description: 最大用户数
          example: 100
        expire_time:
          type: string
          format: date-time
          description: 过期时间
          example: "2025-12-31T23:59:59Z"
        admin_username:
          type: string
          description: 管理员用户名
          example: "admin"
        admin_password:
          type: string
          description: 管理员密码
          example: "password123"
        admin_email:
          type: string
          format: email
          description: 管理员邮箱
          example: "admin@new.com"
        config:
          type: object
          description: 租户配置

    UpdateTenantRequest:
      type: object
      properties:
        tenant_name:
          type: string
          description: 租户名称
        domain:
          type: string
          description: 租户域名
        max_users:
          type: integer
          description: 最大用户数
        expire_time:
          type: string
          format: date-time
          description: 过期时间
        status:
          type: integer
          enum: [1, 2, 3]
          description: 状态
        config:
          type: object
          description: 租户配置

    User:
      type: object
      required:
        - id
        - username
        - tenant_id
        - status
      properties:
        id:
          type: integer
          format: int64
          description: 用户ID
        username:
          type: string
          description: 用户名
        email:
          type: string
          format: email
          description: 邮箱
        phone:
          type: string
          description: 手机号
        real_name:
          type: string
          description: 真实姓名
        avatar_url:
          type: string
          format: uri
          description: 头像URL
        tenant_id:
          type: integer
          format: int64
          description: 租户ID
        status:
          type: integer
          enum: [1, 2, 3]
          description: 状态：1-正常，2-停用，3-锁定
        last_login_time:
          type: string
          format: date-time
          description: 最后登录时间
        created_at:
          type: string
          format: date-time
          description: 创建时间

    UserListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/User'

    CreateUserRequest:
      type: object
      required:
        - username
        - password
        - role_ids
      properties:
        username:
          type: string
          description: 用户名
          example: "newuser"
        email:
          type: string
          format: email
          description: 邮箱
          example: "newuser@example.com"
        phone:
          type: string
          description: 手机号
          example: "13800138000"
        real_name:
          type: string
          description: 真实姓名
          example: "新用户"
        password:
          type: string
          description: 密码
          example: "password123"
        role_ids:
          type: array
          description: 角色ID列表
          items:
            type: integer
            format: int64
          example: [1, 2]
        status:
          type: integer
          enum: [1, 2, 3]
          description: 状态
          default: 1

    # ==================== REQ-002 工作台仪表板相关 ====================
    
    DashboardConfig:
      type: object
      required:
        - config_id
        - config_name
        - layout_config
      properties:
        config_id:
          type: integer
          format: int64
          description: 配置ID
        config_name:
          type: string
          description: 配置名称
          example: "默认工作台"
        layout_config:
          type: object
          description: 布局配置
          properties:
            grid_size:
              type: integer
              example: 12
            row_height:
              type: integer
              example: 60
            margin:
              type: array
              items:
                type: integer
              example: [10, 10]
            layouts:
              type: array
              items:
                type: object
                properties:
                  i:
                    type: string
                  x:
                    type: integer
                  y:
                    type: integer
                  w:
                    type: integer
                  h:
                    type: integer
                  minW:
                    type: integer
                  minH:
                    type: integer
        widget_configs:
          type: array
          description: 组件配置
          items:
            type: object
            properties:
              widget_id:
                type: string
              widget_code:
                type: string
              widget_name:
                type: string
              config:
                type: object
        theme_config:
          type: object
          description: 主题配置
          properties:
            primary_color:
              type: string
              example: "#1890ff"
            theme_mode:
              type: string
              enum: [light, dark]
              example: "light"

    SaveDashboardConfigRequest:
      type: object
      required:
        - config_name
        - layout_config
      properties:
        config_name:
          type: string
          description: 配置名称
          example: "我的工作台"
        layout_config:
          type: object
          description: 布局配置
        widget_configs:
          type: array
          description: 组件配置
          items:
            type: object
        is_default:
          type: boolean
          description: 是否设为默认配置
          default: false

    DashboardStatistics:
      type: object
      properties:
        overview:
          type: object
          description: 概览数据
          properties:
            total_tickets:
              type: integer
              example: 1234
            pending_tickets:
              type: integer
              example: 56
            completed_tickets:
              type: integer
              example: 1178
            avg_response_time:
              type: number
              format: float
              example: 2.5
            customer_satisfaction:
              type: number
              format: float
              example: 4.6
        trends:
          type: object
          description: 趋势数据
          properties:
            ticket_trends:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date
                  created:
                    type: integer
                  completed:
                    type: integer
                  pending:
                    type: integer
        distribution:
          type: object
          description: 分布数据
          properties:
            ticket_by_priority:
              type: object
              additionalProperties:
                type: integer
            ticket_by_category:
              type: object
              additionalProperties:
                type: integer

    # ==================== REQ-003 工单管理相关 ====================
    
    Ticket:
      type: object
      required:
        - id
        - ticket_id
        - title
        - status
        - priority
      properties:
        id:
          type: integer
          format: int64
          description: 工单ID
        ticket_id:
          type: string
          description: 工单编号
          example: "T202508130001"
        title:
          type: string
          description: 工单标题
          example: "服务器故障处理"
        description:
          type: string
          description: 工单描述
        status:
          type: string
          enum: [pending, assigned, in_progress, resolved, closed]
          description: 工单状态
        priority:
          type: string
          enum: [urgent, high, medium, low]
          description: 优先级
        category:
          type: string
          description: 工单分类
          example: "hardware"
        customer_id:
          type: integer
          format: int64
          description: 客户ID
        customer_name:
          type: string
          description: 客户名称
        contact_name:
          type: string
          description: 联系人姓名
        assigned_to:
          type: integer
          format: int64
          description: 指派人ID
        assigned_name:
          type: string
          description: 指派人姓名
        created_at:
          type: string
          format: date-time
          description: 创建时间
        updated_at:
          type: string
          format: date-time
          description: 更新时间
        due_time:
          type: string
          format: date-time
          description: 截止时间
        tags:
          type: array
          description: 标签
          items:
            type: string

    TicketListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Ticket'

    TicketDetail:
      allOf:
        - $ref: '#/components/schemas/Ticket'
        - type: object
          properties:
            customer_info:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
                contact_name:
                  type: string
                contact_phone:
                  type: string
                contact_email:
                  type: string
                  format: email
            assigned_info:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
                email:
                  type: string
                  format: email
                phone:
                  type: string
            time_info:
              type: object
              properties:
                created_at:
                  type: string
                  format: date-time
                assigned_at:
                  type: string
                  format: date-time
                first_response_at:
                  type: string
                  format: date-time
                due_time:
                  type: string
                  format: date-time
                resolved_at:
                  type: string
                  format: date-time
            attachments:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  filename:
                    type: string
                  file_url:
                    type: string
                    format: uri
                  file_size:
                    type: integer
                  uploaded_by:
                    type: string
                  uploaded_at:
                    type: string
                    format: date-time
            custom_fields:
              type: object
              description: 自定义字段
            sla_info:
              type: object
              properties:
                response_sla:
                  type: integer
                  description: 响应SLA（分钟）
                resolve_sla:
                  type: integer
                  description: 解决SLA（分钟）
                response_remaining:
                  type: integer
                  description: 响应剩余时间（分钟）
                resolve_remaining:
                  type: integer
                  description: 解决剩余时间（分钟）

    CreateTicketRequest:
      type: object
      required:
        - title
        - description
        - category
        - priority
        - customer_id
        - contact_name
      properties:
        title:
          type: string
          description: 工单标题
          example: "服务器故障处理"
        description:
          type: string
          description: 工单描述
          example: "生产服务器CPU使用率过高，需要紧急处理"
        category:
          type: string
          description: 工单分类
          example: "hardware"
        priority:
          type: string
          enum: [urgent, high, medium, low]
          description: 优先级
          example: "urgent"
        customer_id:
          type: integer
          format: int64
          description: 客户ID
          example: 1001
        contact_name:
          type: string
          description: 联系人姓名
          example: "张三"
        contact_phone:
          type: string
          description: 联系人电话
          example: "13800138000"
        contact_email:
          type: string
          format: email
          description: 联系人邮箱
          example: "zhangsan@example.com"
        attachments:
          type: array
          description: 附件
          items:
            type: object
            properties:
              filename:
                type: string
              file_url:
                type: string
                format: uri
              file_size:
                type: integer
        custom_fields:
          type: object
          description: 自定义字段

    CreateTicketResponse:
      type: object
      required:
        - ticket_id
        - id
        - title
        - status
        - priority
        - created_at
      properties:
        ticket_id:
          type: string
          description: 工单编号
          example: "T202508130001"
        id:
          type: integer
          format: int64
          description: 工单ID
          example: 1001
        title:
          type: string
          description: 工单标题
        status:
          type: string
          description: 工单状态
          example: "pending"
        priority:
          type: string
          description: 优先级
        created_at:
          type: string
          format: date-time
          description: 创建时间
        estimated_resolve_time:
          type: string
          format: date-time
          description: 预计解决时间

    # ==================== REQ-004 智能派单相关 ====================
    
    IntelligentDispatchRequest:
      type: object
      required:
        - ticket_id
      properties:
        ticket_id:
          type: integer
          format: int64
          description: 工单ID
          example: 1001
        strategy:
          type: string
          description: 派单策略
          enum: [best_match, load_balance, skill_priority, round_robin]
          default: "best_match"
        constraints:
          type: object
          description: 约束条件
          properties:
            skill_required:
              type: array
              description: 必需技能
              items:
                type: string
              example: ["linux", "database"]
            min_skill_level:
              type: integer
              description: 最低技能等级
              minimum: 1
              maximum: 4
              example: 2
            location_preference:
              type: string
              description: 位置偏好
              enum: [same_city, same_region, no_preference]
              example: "same_city"
            exclude_engineers:
              type: array
              description: 排除的工程师ID
              items:
                type: integer
                format: int64
              example: [2001, 2002]
        force_dispatch:
          type: boolean
          description: 是否强制派单
          default: false

    DispatchResult:
      type: object
      required:
        - dispatch_id
        - ticket_id
        - selected_engineer
        - match_details
      properties:
        dispatch_id:
          type: integer
          format: int64
          description: 派单记录ID
          example: 10001
        ticket_id:
          type: integer
          format: int64
          description: 工单ID
          example: 1001
        selected_engineer:
          type: object
          description: 选中的工程师
          properties:
            id:
              type: integer
              format: int64
              example: 2003
            name:
              type: string
              example: "王工程师"
            email:
              type: string
              format: email
              example: "wang@example.com"
            phone:
              type: string
              example: "13700137000"
            skills:
              type: array
              items:
                type: string
              example: ["linux", "database", "network"]
            current_workload:
              type: integer
              example: 3
            location:
              type: string
              example: "北京市"
        match_details:
          type: object
          description: 匹配详情
          properties:
            total_score:
              type: number
              format: float
              example: 92.5
            skill_match_score:
              type: number
              format: float
              example: 95.0
            workload_score:
              type: number
              format: float
              example: 88.0
            location_score:
              type: number
              format: float
              example: 95.0
            performance_score:
              type: number
              format: float
              example: 92.0
        dispatch_reason:
          type: string
          description: 派单原因
          example: "技能匹配度最高，工作负载适中，地理位置就近"
        estimated_response_time:
          type: string
          format: date-time
          description: 预计响应时间
          example: "2025-08-13T11:00:00Z"
        alternatives:
          type: array
          description: 备选方案
          items:
            type: object
            properties:
              engineer_id:
                type: integer
                format: int64
              engineer_name:
                type: string
              total_score:
                type: number
                format: float
              reason:
                type: string

    DispatchSuggestions:
      type: object
      required:
        - ticket_info
        - suggestions
      properties:
        ticket_info:
          type: object
          description: 工单信息
          properties:
            id:
              type: integer
              format: int64
            title:
              type: string
            priority:
              type: string
            required_skills:
              type: array
              items:
                type: string
        suggestions:
          type: array
          description: 派单建议
          items:
            type: object
            properties:
              rank:
                type: integer
                description: 排名
              engineer:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  avatar:
                    type: string
                    format: uri
                  current_workload:
                    type: integer
                  location:
                    type: string
                  online_status:
                    type: string
                    enum: [online, offline, busy]
              match_score:
                type: number
                format: float
              score_breakdown:
                type: object
                properties:
                  skill_match:
                    type: number
                    format: float
                  workload:
                    type: number
                    format: float
                  location:
                    type: number
                    format: float
                  performance:
                    type: number
                    format: float
              estimated_response:
                type: string
                description: 预计响应时间
              confidence:
                type: string
                enum: [高, 中, 低]
                description: 置信度tags:
  - name: REQ-001 基础架构
    description: 多租户架构、统一认证、权限管理、数据存储等基础服务
  - name: REQ-002 工作台仪表板
    description: 个性化工作台、实时数据仪表板、任务中心、快速导航
  - name: REQ-003 工单管理
    description: 工单全生命周期管理、状态流转、评论沟通、附件管理
  - name: REQ-004 智能派单
    description: AI算法自动派单、技能匹配、负载均衡、派单规则
  - name: REQ-005 知识库管理
    description: 知识文档管理、全文搜索、智能推荐、版本控制
  - name: REQ-006A 工程师管理
    description: 工程师档案管理、技能评估、状态跟踪、工作负载

paths:
  # ==================== REQ-005 知识库管理模块 ====================
  
  /knowledge/documents:
    get:
      tags:
        - REQ-005 知识库管理
      summary: 查询知识文档列表
      description: |
        查询知识文档列表，支持多种筛选条件和排序
        
        **REQ-ID**: REQ-005-002
        **权限要求**: knowledge:read
      operationId: getKnowledgeDocuments
      parameters:
        - name: category_id
          in: query
          description: 分类ID筛选
          schema:
            type: integer
            format: int64
        - name: tags
          in: query
          description: 标签筛选（多个用逗号分隔）
          schema:
            type: string
        - name: status
          in: query
          description: 状态筛选
          schema:
            type: string
            enum: [draft, published, archived]
        - name: author_id
          in: query
          description: 作者筛选
          schema:
            type: integer
            format: int64
        - name: difficulty_level
          in: query
          description: 难度等级筛选
          schema:
            type: string
            enum: [beginner, intermediate, advanced, expert]
        - name: keyword
          in: query
          description: 关键词搜索
          schema:
            type: string
        - name: sort
          in: query
          description: 排序字段
          schema:
            type: string
            enum: [created_at, updated_at, view_count, rating]
            default: "updated_at"
        - name: order
          in: query
          description: 排序方向
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/KnowledgeDocumentListResponse'

    post:
      tags:
        - REQ-005 知识库管理
      summary: 创建知识文档
      description: |
        创建新的知识文档
        
        **REQ-ID**: REQ-005-001
        **权限要求**: knowledge:create
      operationId: createKnowledgeDocument
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateKnowledgeDocumentRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CreateKnowledgeDocumentResponse'

  /knowledge/documents/{id}:
    get:
      tags:
        - REQ-005 知识库管理
      summary: 获取知识文档详情
      description: |
        获取指定知识文档的详细信息
        
        **REQ-ID**: REQ-005-001
        **权限要求**: knowledge:read
      operationId: getKnowledgeDocumentDetail
      parameters:
        - name: id
          in: path
          required: true
          description: 知识文档ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/KnowledgeDocumentDetail'

    put:
      tags:
        - REQ-005 知识库管理
      summary: 更新知识文档
      description: |
        更新指定知识文档的信息
        
        **REQ-ID**: REQ-005-001
        **权限要求**: knowledge:update
      operationId: updateKnowledgeDocument
      parameters:
        - name: id
          in: path
          required: true
          description: 知识文档ID
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateKnowledgeDocumentRequest'
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/KnowledgeDocument'

  /knowledge/search:
    get:
      tags:
        - REQ-005 知识库管理
      summary: 全文搜索知识文档
      description: |
        使用全文搜索引擎搜索知识文档
        
        **REQ-ID**: REQ-005-003
        **权限要求**: knowledge:read
      operationId: searchKnowledgeDocuments
      parameters:
        - name: q
          in: query
          required: true
          description: 搜索关键词
          schema:
            type: string
        - name: category_ids
          in: query
          description: 分类ID列表（逗号分隔）
          schema:
            type: string
        - name: tags
          in: query
          description: 标签列表（逗号分隔）
          schema:
            type: string
        - name: difficulty_level
          in: query
          description: 难度等级
          schema:
            type: string
            enum: [beginner, intermediate, advanced, expert]
        - name: content_type
          in: query
          description: 内容类型
          schema:
            type: string
            enum: [markdown, html, text]
        - name: date_range
          in: query
          description: 时间范围
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
        - name: sort
          in: query
          description: 排序方式
          schema:
            type: string
            enum: [relevance, date, popularity, rating]
            default: "relevance"
        - name: highlight
          in: query
          description: 是否高亮关键词
          schema:
            type: boolean
            default: true
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: 搜索成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/KnowledgeSearchResponse'

  /knowledge/recommendations:
    get:
      tags:
        - REQ-005 知识库管理
      summary: 获取知识推荐
      description: |
        基于上下文获取智能知识推荐
        
        **REQ-ID**: REQ-005-004
        **权限要求**: knowledge:read
      operationId: getKnowledgeRecommendations
      parameters:
        - name: context
          in: query
          required: true
          description: 推荐上下文
          schema:
            type: string
            enum: [ticket, category, user_behavior]
        - name: ticket_id
          in: query
          description: 工单ID（当context为ticket时）
          schema:
            type: integer
            format: int64
        - name: category_id
          in: query
          description: 分类ID（当context为category时）
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: 推荐数量限制
          schema:
            type: integer
            minimum: 1
            maximum: 20
            default: 5
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/KnowledgeRecommendations'

  /knowledge/categories:
    get:
      tags:
        - REQ-005 知识库管理
      summary: 获取知识分类树
      description: |
        获取知识库的分类树结构
        
        **REQ-ID**: REQ-005-002
        **权限要求**: knowledge:read
      operationId: getKnowledgeCategories
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/KnowledgeCategory'

  # ==================== REQ-006A 工程师管理模块 ====================
  
  /engineers:
    get:
      tags:
        - REQ-006A 工程师管理
      summary: 查询工程师列表
      description: |
        查询工程师列表，支持多种筛选条件
        
        **REQ-ID**: REQ-006A-001
        **权限要求**: engineer:read
      operationId: getEngineers
      parameters:
        - name: status
          in: query
          description: 状态筛选
          schema:
            type: string
            enum: [active, inactive, busy, offline]
        - name: skill_codes
          in: query
          description: 技能筛选（多个用逗号分隔）
          schema:
            type: string
        - name: location
          in: query
          description: 地理位置筛选
          schema:
            type: string
        - name: team_id
          in: query
          description: 团队筛选
          schema:
            type: integer
            format: int64
        - name: keyword
          in: query
          description: 关键词搜索
          schema:
            type: string
        - name: sort
          in: query
          description: 排序字段
          schema:
            type: string
            enum: [name, join_date, rating, workload]
            default: "name"
        - name: order
          in: query
          description: 排序方向
          schema:
            type: string
            enum: [asc, desc]
            default: "asc"
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: 查询成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EngineerListResponse'

    post:
      tags:
        - REQ-006A 工程师管理
      summary: 创建工程师档案
      description: |
        创建新的工程师档案
        
        **REQ-ID**: REQ-006A-001
        **权限要求**: engineer:create
      operationId: createEngineer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEngineerRequest'
      responses:
        '200':
          description: 创建成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Engineer'

  /engineers/{id}:
    get:
      tags:
        - REQ-006A 工程师管理
      summary: 获取工程师详情
      description: |
        获取指定工程师的详细信息
        
        **REQ-ID**: REQ-006A-001
        **权限要求**: engineer:read
      operationId: getEngineerDetail
      parameters:
        - name: id
          in: path
          required: true
          description: 工程师ID
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/EngineerDetail'

  /skills:
    get:
      tags:
        - REQ-006A 工程师管理
      summary: 获取技能库
      description: |
        获取系统中的技能库信息
        
        **REQ-ID**: REQ-006A-003
        **权限要求**: skill:read
      operationId: getSkills
      parameters:
        - name: category
          in: query
          description: 技能分类筛选
          schema:
            type: string
        - name: keyword
          in: query
          description: 关键词搜索
          schema:
            type: string
      responses:
        '200':
          description: 获取成功
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/ApiResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Skill'

components:
  schemas:
    # ==================== REQ-005 知识库管理相关 ====================
    
    KnowledgeDocument:
      type: object
      required:
        - id
        - title
        - status
        - version
      properties:
        id:
          type: integer
          format: int64
          description: 知识文档ID
        title:
          type: string
          description: 文档标题
          example: "Linux服务器故障排查指南"
        slug:
          type: string
          description: URL友好的标识符
          example: "linux-server-troubleshooting-guide"
        summary:
          type: string
          description: 文档摘要
        category:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            icon:
              type: string
        tags:
          type: array
          description: 标签
          items:
            type: string
        author:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            avatar:
              type: string
              format: uri
        status:
          type: string
          enum: [draft, published, archived]
          description: 文档状态
        version:
          type: string
          description: 版本号
          example: "1.2"
        difficulty_level:
          type: string
          enum: [beginner, intermediate, advanced, expert]
          description: 难度等级
        estimated_read_time:
          type: integer
          description: 预计阅读时间（分钟）
        view_count:
          type: integer
          description: 浏览次数
        like_count:
          type: integer
          description: 点赞次数
        rating:
          type: number
          format: float
          description: 评分
        created_at:
          type: string
          format: date-time
          description: 创建时间
        updated_at:
          type: string
          format: date-time
          description: 更新时间

    KnowledgeDocumentDetail:
      allOf:
        - $ref: '#/components/schemas/KnowledgeDocument'
        - type: object
          properties:
            content:
              type: string
              description: 文档内容
            content_type:
              type: string
              enum: [markdown, html, text]
              description: 内容类型
            keywords:
              type: array
              description: 关键词
              items:
                type: string
            attachments:
              type: array
              description: 附件
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  filename:
                    type: string
                  file_url:
                    type: string
                    format: uri
                  file_size:
                    type: integer
                  file_type:
                    type: string
            statistics:
              type: object
              properties:
                view_count:
                  type: integer
                like_count:
                  type: integer
                comment_count:
                  type: integer
                share_count:
                  type: integer
                rating:
                  type: number
                  format: float
                rating_count:
                  type: integer
            related_documents:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  title:
                    type: string
                  similarity:
                    type: number
                    format: float
            version_info:
              type: object
              properties:
                current_version:
                  type: string
                total_versions:
                  type: integer
                last_updated_by:
                  type: string
                change_summary:
                  type: string

    KnowledgeDocumentListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/KnowledgeDocument'

    CreateKnowledgeDocumentRequest:
      type: object
      required:
        - title
        - content
        - category_id
      properties:
        title:
          type: string
          description: 文档标题
          example: "Linux服务器故障排查指南"
        content:
          type: string
          description: 文档内容
        content_type:
          type: string
          enum: [markdown, html, text]
          default: "markdown"
        category_id:
          type: integer
          format: int64
          description: 分类ID
        tags:
          type: array
          description: 标签
          items:
            type: string
        keywords:
          type: array
          description: 关键词
          items:
            type: string
        template_id:
          type: integer
          format: int64
          description: 模板ID
        attachments:
          type: array
          description: 附件
          items:
            type: object
            properties:
              filename:
                type: string
              file_url:
                type: string
                format: uri
              file_size:
                type: integer
        is_public:
          type: boolean
          description: 是否公开
          default: true
        difficulty_level:
          type: string
          enum: [beginner, intermediate, advanced, expert]
          description: 难度等级
        estimated_read_time:
          type: integer
          description: 预计阅读时间（分钟）

    CreateKnowledgeDocumentResponse:
      type: object
      required:
        - id
        - title
        - status
        - version
        - created_at
      properties:
        id:
          type: integer
          format: int64
          description: 文档ID
        title:
          type: string
          description: 文档标题
        slug:
          type: string
          description: URL标识符
        status:
          type: string
          description: 文档状态
        version:
          type: string
          description: 版本号
        created_at:
          type: string
          format: date-time
          description: 创建时间
        author:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            avatar:
              type: string
              format: uri

    UpdateKnowledgeDocumentRequest:
      type: object
      properties:
        title:
          type: string
          description: 文档标题
        content:
          type: string
          description: 文档内容
        category_id:
          type: integer
          format: int64
          description: 分类ID
        tags:
          type: array
          description: 标签
          items:
            type: string
        keywords:
          type: array
          description: 关键词
          items:
            type: string
        difficulty_level:
          type: string
          enum: [beginner, intermediate, advanced, expert]
          description: 难度等级
        estimated_read_time:
          type: integer
          description: 预计阅读时间（分钟）
        change_summary:
          type: string
          description: 变更摘要

    KnowledgeSearchResponse:
      type: object
      required:
        - query
        - total
        - took
        - items
      properties:
        query:
          type: string
          description: 搜索关键词
        total:
          type: integer
          description: 总结果数
        took:
          type: integer
          description: 搜索耗时（毫秒）
        page:
          type: integer
          description: 当前页码
        size:
          type: integer
          description: 每页大小
        suggestions:
          type: array
          description: 搜索建议
          items:
            type: string
        facets:
          type: object
          description: 分面搜索结果
          properties:
            categories:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  count:
                    type: integer
            tags:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  count:
                    type: integer
            difficulty_levels:
              type: array
              items:
                type: object
                properties:
                  level:
                    type: string
                  count:
                    type: integer
        items:
          type: array
          description: 搜索结果
          items:
            allOf:
              - $ref: '#/components/schemas/KnowledgeDocument'
              - type: object
                properties:
                  score:
                    type: number
                    format: float
                    description: 相关性得分
                  highlight:
                    type: object
                    description: 高亮信息
                    properties:
                      title:
                        type: string
                      content:
                        type: string

    KnowledgeRecommendations:
      type: object
      required:
        - context
        - recommendations
      properties:
        context:
          type: string
          description: 推荐上下文
        context_info:
          type: object
          description: 上下文信息
        recommendations:
          type: array
          description: 推荐列表
          items:
            allOf:
              - $ref: '#/components/schemas/KnowledgeDocument'
              - type: object
                properties:
                  relevance_score:
                    type: number
                    format: float
                    description: 相关性得分
                  reason:
                    type: string
                    description: 推荐原因
        related_searches:
          type: array
          description: 相关搜索
          items:
            type: string

    KnowledgeCategory:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          description: 分类ID
        name:
          type: string
          description: 分类名称
        description:
          type: string
          description: 分类描述
        icon:
          type: string
          description: 图标
        sort_order:
          type: integer
          description: 排序顺序
        document_count:
          type: integer
          description: 文档数量
        children:
          type: array
          description: 子分类
          items:
            $ref: '#/components/schemas/KnowledgeCategory'

    # ==================== REQ-006A 工程师管理相关 ====================
    
    Engineer:
      type: object
      required:
        - id
        - name
        - email
        - status
      properties:
        id:
          type: integer
          format: int64
          description: 工程师ID
        employee_id:
          type: string
          description: 员工编号
          example: "ENG001"
        name:
          type: string
          description: 姓名
          example: "张工程师"
        email:
          type: string
          format: email
          description: 邮箱
        phone:
          type: string
          description: 手机号
        avatar:
          type: string
          format: uri
          description: 头像URL
        title:
          type: string
          description: 职位
          example: "高级运维工程师"
        level:
          type: string
          enum: [junior, intermediate, senior, expert]
          description: 技术等级
        team:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
        location:
          type: object
          properties:
            city:
              type: string
            district:
              type: string
        status:
          type: string
          enum: [active, inactive, busy, offline]
          description: 状态
        online_status:
          type: string
          enum: [online, offline, busy]
          description: 在线状态
        current_workload:
          type: integer
          description: 当前工作负载
        max_workload:
          type: integer
          description: 最大工作负载
        skills:
          type: array
          description: 技能列表
          items:
            type: object
            properties:
              code:
                type: string
              name:
                type: string
              level:
                type: integer
        rating:
          type: number
          format: float
          description: 评分
        join_date:
          type: string
          format: date
          description: 入职日期
        last_active:
          type: string
          format: date-time
          description: 最后活跃时间

    EngineerDetail:
      allOf:
        - $ref: '#/components/schemas/Engineer'
        - type: object
          properties:
            department:
              type: string
              description: 部门
            contact_info:
              type: object
              properties:
                work_phone:
                  type: string
                emergency_contact:
                  type: string
                wechat:
                  type: string
                preferred_contact:
                  type: string
            employment_info:
              type: object
              properties:
                join_date:
                  type: string
                  format: date
                contract_type:
                  type: string
                  enum: [full_time, part_time, contract]
                employment_status:
                  type: string
                  enum: [active, inactive, probation]
            certifications:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  code:
                    type: string
                  issued_date:
                    type: string
                    format: date
                  expiry_date:
                    type: string
                    format: date
                  issuer:
                    type: string
                  status:
                    type: string
                    enum: [active, expired, revoked]
            work_schedule:
              type: object
              properties:
                timezone:
                  type: string
                work_hours:
                  type: object
                  properties:
                    start:
                      type: string
                    end:
                      type: string
                work_days:
                  type: array
                  items:
                    type: string
                flexible_hours:
                  type: boolean
            performance:
              type: object
              properties:
                rating:
                  type: number
                  format: float
                total_tickets:
                  type: integer
                completed_tickets:
                  type: integer
                success_rate:
                  type: number
                  format: float
                avg_resolution_time:
                  type: number
                  format: float
                customer_satisfaction:
                  type: number
                  format: float
                knowledge_contributions:
                  type: integer

    EngineerListResponse:
      allOf:
        - $ref: '#/components/schemas/PaginationResponse'
        - type: object
          properties:
            items:
              type: array
              items:
                $ref: '#/components/schemas/Engineer'

    CreateEngineerRequest:
      type: object
      required:
        - employee_id
        - name
        - email
        - title
        - level
        - team_id
      properties:
        employee_id:
          type: string
          description: 员工编号
          example: "ENG002"
        name:
          type: string
          description: 姓名
          example: "李工程师"
        email:
          type: string
          format: email
          description: 邮箱
        phone:
          type: string
          description: 手机号
        title:
          type: string
          description: 职位
        level:
          type: string
          enum: [junior, intermediate, senior, expert]
          description: 技术等级
        team_id:
          type: integer
          format: int64
          description: 团队ID
        location:
          type: object
          properties:
            city:
              type: string
            district:
              type: string
        skills:
          type: array
          description: 技能列表
          items:
            type: object
            properties:
              skill_code:
                type: string
              skill_level:
                type: integer
                minimum: 1
                maximum: 4
              experience_years:
                type: number
                format: float
        work_schedule:
          type: object
          properties:
            timezone:
              type: string
            work_hours:
              type: object
              properties:
                start:
                  type: string
                end:
                  type: string

    Skill:
      type: object
      required:
        - code
        - name
        - category
      properties:
        code:
          type: string
          description: 技能编码
          example: "linux"
        name:
          type: string
          description: 技能名称
          example: "Linux系统管理"
        category:
          type: string
          description: 技能分类
          example: "操作系统"
        description:
          type: string
          description: 技能描述
        levels:
          type: array
          description: 技能等级定义
          items:
            type: object
            properties:
              level:
                type: integer
                minimum: 1
                maximum: 4
              name:
                type: string
              description:
                type: string
        related_skills:
          type: array
          description: 相关技能
          items:
            type: string
        certifications:
          type: array
          description: 相关认证
          items:
            type: string
        is_active:
          type: boolean
          description: 是否启用